Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Class
    colon_colon
    Protected
    Private
    question_mark
    new_line
    arrow
    dot
    Void
    colon
    Public
    right_shift

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> GLOBAL_STATEMENT_LIST MAIN
Rule 2     PROGRAM -> MAIN
Rule 3     EPSILON -> <empty>
Rule 4     GLOBAL_STATEMENT -> EXPRESSION_STATEMENT
Rule 5     GLOBAL_STATEMENT -> DECLARATION_STATEMENT
Rule 6     MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace
Rule 7     STATEMENT -> EXPRESSION_STATEMENT
Rule 8     STATEMENT -> SELECTION_STATEMENT
Rule 9     STATEMENT -> JUMP_STATEMENT
Rule 10    STATEMENT -> ITERATION_STATEMENT
Rule 11    STATEMENT -> LOCAL_DECLARATION_STATEMENT
Rule 12    STATEMENT -> PRINT_STATEMENT
Rule 13    PRINT_STATEMENT -> Cout CASCADE semicolon
Rule 14    CASCADE -> left_shift EXPRESSION
Rule 15    CASCADE -> left_shift string_literal
Rule 16    CASCADE -> left_shift EXPRESSION CASCADE
Rule 17    CASCADE -> left_shift string_literal CASCADE
Rule 18    LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION
Rule 19    EXPRESSION_STATEMENT -> EXPRESSION semicolon
Rule 20    EXPRESSION_STATEMENT -> semicolon
Rule 21    COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace
Rule 22    COMPOUND_STATEMENT -> l_brace r_brace
Rule 23    GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT
Rule 24    GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT
Rule 25    STATEMENT_LIST -> STATEMENT
Rule 26    STATEMENT_LIST -> STATEMENT_LIST STATEMENT
Rule 27    ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT
Rule 28    SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT
Rule 29    SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
Rule 30    TEMP -> EPSILON
Rule 31    JUMP_STATEMENT -> Break semicolon
Rule 32    JUMP_STATEMENT -> Continue semicolon
Rule 33    JUMP_STATEMENT -> Return EXPRESSION semicolon
Rule 34    JUMP_STATEMENT -> Return semicolon
Rule 35    DECLARATION_STATEMENT -> DECLARATION
Rule 36    EXPRESSION -> ASSIGNMENT_EXPRESSION
Rule 37    EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION
Rule 38    ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION
Rule 39    ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
Rule 40    ASSIGNMENT_OPERATOR -> equal
Rule 41    ASSIGNMENT_OPERATOR -> star_equal
Rule 42    ASSIGNMENT_OPERATOR -> slash_equal
Rule 43    ASSIGNMENT_OPERATOR -> mod_equal
Rule 44    ASSIGNMENT_OPERATOR -> plus_equal
Rule 45    ASSIGNMENT_OPERATOR -> minus_equal
Rule 46    ASSIGNMENT_OPERATOR -> left_shift_equal
Rule 47    ASSIGNMENT_OPERATOR -> right_shift_equal
Rule 48    ASSIGNMENT_OPERATOR -> ampersand_equal
Rule 49    ASSIGNMENT_OPERATOR -> cap_equal
Rule 50    ASSIGNMENT_OPERATOR -> pipe_equal
Rule 51    CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION
Rule 52    LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION
Rule 53    LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
Rule 54    LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION
Rule 55    LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
Rule 56    INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION
Rule 57    INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
Rule 58    EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION
Rule 59    EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
Rule 60    AND_EXPRESSION -> EQUALITY_EXPRESSION
Rule 61    AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION
Rule 62    EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION
Rule 63    EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
Rule 64    EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
Rule 65    RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION
Rule 66    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
Rule 67    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
Rule 68    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
Rule 69    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
Rule 70    SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION
Rule 71    ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION
Rule 72    ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
Rule 73    ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
Rule 74    MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION
Rule 75    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
Rule 76    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
Rule 77    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
Rule 78    UNARY_EXPRESSION -> PRIMARY_EXPRESSION
Rule 79    UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION
Rule 80    UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION
Rule 81    UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION
Rule 82    UNARY_OPERATOR -> star
Rule 83    UNARY_OPERATOR -> ampersand
Rule 84    UNARY_OPERATOR -> plus
Rule 85    UNARY_OPERATOR -> minus
Rule 86    UNARY_OPERATOR -> exclamation
Rule 87    UNARY_OPERATOR -> tilde
Rule 88    EXPRESSION_LIST -> ASSIGNMENT_EXPRESSION
Rule 89    EXPRESSION_LIST -> EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION
Rule 90    PRIMARY_EXPRESSION -> LITERAL
Rule 91    PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren
Rule 92    PRIMARY_EXPRESSION -> NAME
Rule 93    PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket
Rule 94    NAME -> identifier
Rule 95    LITERAL -> integer_constant
Rule 96    LITERAL -> character_constant
Rule 97    LITERAL -> floating_constant
Rule 98    LITERAL -> string_literal
Rule 99    DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon
Rule 100   LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon
Rule 101   LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME
Rule 102   LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME
Rule 103   DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER
Rule 104   DECL_SPECIFIERS -> TYPE_SPECIFIER
Rule 105   TYPE_SPECIFIER -> SIMPLE_TYPE_NAME
Rule 106   SIMPLE_TYPE_NAME -> NAME
Rule 107   SIMPLE_TYPE_NAME -> Char
Rule 108   SIMPLE_TYPE_NAME -> Short
Rule 109   SIMPLE_TYPE_NAME -> Int
Rule 110   SIMPLE_TYPE_NAME -> Long
Rule 111   SIMPLE_TYPE_NAME -> Signed
Rule 112   SIMPLE_TYPE_NAME -> Unsigned
Rule 113   SIMPLE_TYPE_NAME -> Float
Rule 114   SIMPLE_TYPE_NAME -> Double
Rule 115   CONSTANT_EXPRESSION -> CONDITIONAL_EXPRESSION
Rule 116   DECLARATOR_LIST -> INIT_DECLARATOR
Rule 117   LOCAL_DECLARATOR_LIST -> LOCAL_INIT_DECLARATOR
Rule 118   INIT_DECLARATOR -> DECLARATOR INITIALIZER
Rule 119   INIT_DECLARATOR -> DECLARATOR
Rule 120   LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR INITIALIZER
Rule 121   LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR
Rule 122   DECLARATOR -> DNAME
Rule 123   DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
Rule 124   DECLARATOR -> DECLARATOR l_bracket r_bracket
Rule 125   DECLARATOR -> l_paren DECLARATOR r_paren
Rule 126   LOCAL_DECLARATOR -> NAME
Rule 127   LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
Rule 128   LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket
Rule 129   LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren
Rule 130   DNAME -> NAME
Rule 131   DNAME -> tilde NAME
Rule 132   INITIALIZER -> equal ASSIGNMENT_EXPRESSION
Rule 133   INITIALIZER -> l_paren EXPRESSION_LIST r_paren

Terminals, with rules where they appear

Break                : 31
Char                 : 107
Class                : 
Continue             : 32
Cout                 : 13
Double               : 114
Else                 : 29
Float                : 113
If                   : 28 29
Int                  : 6 109
Long                 : 110
Main                 : 6
Private              : 
Protected            : 
Public               : 
Return               : 6 33 34
Short                : 108
Signed               : 111
Unsigned             : 112
Void                 : 
While                : 27
ampersand            : 61 83
ampersand_ampersand  : 55
ampersand_equal      : 48
arrow                : 
cap                  : 59
cap_equal            : 49
character_constant   : 96
colon                : 
colon_colon          : 
comma                : 37 89
dot                  : 
equal                : 40 132
equal_equal          : 63
error                : 
exclamation          : 86
floating_constant    : 97
gt                   : 67
gte                  : 69
identifier           : 94
integer_constant     : 6 93 95
l_brace              : 6 21 22
l_bracket            : 93 123 124 127 128
l_paren              : 6 27 28 29 91 125 129 133
left_shift           : 14 15 16 17
left_shift_equal     : 46
lt                   : 66
lte                  : 68
minus                : 73 85
minus_equal          : 45
minus_minus          : 81
mod                  : 77
mod_equal            : 43
new_line             : 
notequal             : 64
pipe                 : 57
pipe_equal           : 50
pipe_pipe            : 53
plus                 : 72 84
plus_equal           : 44
plus_plus            : 80
question_mark        : 
r_brace              : 6 21 22
r_bracket            : 93 123 124 127 128
r_paren              : 6 27 28 29 91 125 129 133
right_shift          : 
right_shift_equal    : 47
semicolon            : 6 13 19 20 31 32 33 34 99 100
slash                : 76
slash_equal          : 42
star                 : 75 82
star_equal           : 41
string_literal       : 15 17 98
tilde                : 87 131

Nonterminals, with rules where they appear

ADDITIVE_EXPRESSION  : 70 72 73
AND_EXPRESSION       : 58 59 61
ASSIGNMENT_EXPRESSION : 36 37 39 88 89 132
ASSIGNMENT_OPERATOR  : 39
CASCADE              : 13 16 17
COMPOUND_STATEMENT   : 27 28 29 29
CONDITIONAL_EXPRESSION : 38 115
CONSTANT_EXPRESSION  : 123 127
DECLARATION          : 35
DECLARATION_STATEMENT : 5
DECLARATOR           : 118 119 123 124 125
DECLARATOR_LIST      : 99
DECL_SPECIFIERS      : 99 103
DNAME                : 122
EPSILON              : 30
EQUALITY_EXPRESSION  : 60 61 63 64
EXCLUSIVE_OR_EXPRESSION : 56 57 59
EXPRESSION           : 14 16 19 27 28 29 33 37 91
EXPRESSION_LIST      : 89 133
EXPRESSION_STATEMENT : 4 7
GLOBAL_STATEMENT     : 23 24
GLOBAL_STATEMENT_LIST : 1 24
INCLUSIVE_OR_EXPRESSION : 54 55 57
INITIALIZER          : 118 120
INIT_DECLARATOR      : 116
ITERATION_STATEMENT  : 10
JUMP_STATEMENT       : 9
LITERAL              : 90
LOCAL_DECLARATION    : 18
LOCAL_DECLARATION_STATEMENT : 11
LOCAL_DECLARATOR     : 120 121 127 128 129
LOCAL_DECLARATOR_LIST : 100
LOCAL_DECL_SPECIFIERS : 100 101
LOCAL_INIT_DECLARATOR : 117
LOGICAL_AND_EXPRESSION : 52 53 55
LOGICAL_OR_EXPRESSION : 51 53
MAIN                 : 1 2
MULTIPLICATIVE_EXPRESSION : 71 72 73 75 76 77
NAME                 : 92 93 106 126 130 131
PRIMARY_EXPRESSION   : 78
PRINT_STATEMENT      : 12
PROGRAM              : 0
RELATIONAL_EXPRESSION : 62 63 64 66 67 68 69
SELECTION_STATEMENT  : 8
SHIFT_EXPRESSION     : 65 66 67 68 69
SIMPLE_TYPE_NAME     : 101 102 105
STATEMENT            : 25 26
STATEMENT_LIST       : 6 21 26
TEMP                 : 29
TYPE_SPECIFIER       : 103 104
UNARY_EXPRESSION     : 39 74 75 76 77 79 80 81
UNARY_OPERATOR       : 79

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . GLOBAL_STATEMENT_LIST MAIN
    (2) PROGRAM -> . MAIN
    (23) GLOBAL_STATEMENT_LIST -> . GLOBAL_STATEMENT
    (24) GLOBAL_STATEMENT_LIST -> . GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT
    (6) MAIN -> . Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace
    (4) GLOBAL_STATEMENT -> . EXPRESSION_STATEMENT
    (5) GLOBAL_STATEMENT -> . DECLARATION_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (35) DECLARATION_STATEMENT -> . DECLARATION
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (99) DECLARATION -> . DECL_SPECIFIERS DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (103) DECL_SPECIFIERS -> . DECL_SPECIFIERS TYPE_SPECIFIER
    (104) DECL_SPECIFIERS -> . TYPE_SPECIFIER
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (105) TYPE_SPECIFIER -> . SIMPLE_TYPE_NAME
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    Int             shift and go to state 11
    semicolon       shift and go to state 13
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    Char            shift and go to state 24
    Short           shift and go to state 28
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    DECLARATION                    shift and go to state 20
    GLOBAL_STATEMENT               shift and go to state 21
    DECL_SPECIFIERS                shift and go to state 22
    PROGRAM                        shift and go to state 23
    MAIN                           shift and go to state 17
    CONDITIONAL_EXPRESSION         shift and go to state 46
    GLOBAL_STATEMENT_LIST          shift and go to state 30
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 33
    EXPRESSION_STATEMENT           shift and go to state 34
    EQUALITY_EXPRESSION            shift and go to state 44
    DECLARATION_STATEMENT          shift and go to state 7
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    SIMPLE_TYPE_NAME               shift and go to state 38
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    PRIMARY_EXPRESSION             shift and go to state 9
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    UNARY_EXPRESSION               shift and go to state 18
    TYPE_SPECIFIER                 shift and go to state 19

state 1

    (65) RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .

    lt              reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    gt              reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    lte             reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    gte             reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    equal_equal     reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    notequal        reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    ampersand       reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    cap             reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    pipe            reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    ampersand_ampersand reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    pipe_pipe       reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    semicolon       reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    r_paren         reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    comma           reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    left_shift      reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)
    r_bracket       reduce using rule 65 (RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION .)


state 2

    (85) UNARY_OPERATOR -> minus .

    plus_plus       reduce using rule 85 (UNARY_OPERATOR -> minus .)
    minus_minus     reduce using rule 85 (UNARY_OPERATOR -> minus .)
    l_paren         reduce using rule 85 (UNARY_OPERATOR -> minus .)
    star            reduce using rule 85 (UNARY_OPERATOR -> minus .)
    ampersand       reduce using rule 85 (UNARY_OPERATOR -> minus .)
    plus            reduce using rule 85 (UNARY_OPERATOR -> minus .)
    minus           reduce using rule 85 (UNARY_OPERATOR -> minus .)
    exclamation     reduce using rule 85 (UNARY_OPERATOR -> minus .)
    tilde           reduce using rule 85 (UNARY_OPERATOR -> minus .)
    integer_constant reduce using rule 85 (UNARY_OPERATOR -> minus .)
    character_constant reduce using rule 85 (UNARY_OPERATOR -> minus .)
    floating_constant reduce using rule 85 (UNARY_OPERATOR -> minus .)
    string_literal  reduce using rule 85 (UNARY_OPERATOR -> minus .)
    identifier      reduce using rule 85 (UNARY_OPERATOR -> minus .)


state 3

    (82) UNARY_OPERATOR -> star .

    plus_plus       reduce using rule 82 (UNARY_OPERATOR -> star .)
    minus_minus     reduce using rule 82 (UNARY_OPERATOR -> star .)
    l_paren         reduce using rule 82 (UNARY_OPERATOR -> star .)
    star            reduce using rule 82 (UNARY_OPERATOR -> star .)
    ampersand       reduce using rule 82 (UNARY_OPERATOR -> star .)
    plus            reduce using rule 82 (UNARY_OPERATOR -> star .)
    minus           reduce using rule 82 (UNARY_OPERATOR -> star .)
    exclamation     reduce using rule 82 (UNARY_OPERATOR -> star .)
    tilde           reduce using rule 82 (UNARY_OPERATOR -> star .)
    integer_constant reduce using rule 82 (UNARY_OPERATOR -> star .)
    character_constant reduce using rule 82 (UNARY_OPERATOR -> star .)
    floating_constant reduce using rule 82 (UNARY_OPERATOR -> star .)
    string_literal  reduce using rule 82 (UNARY_OPERATOR -> star .)
    identifier      reduce using rule 82 (UNARY_OPERATOR -> star .)


state 4

    (113) SIMPLE_TYPE_NAME -> Float .

    Char            reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Short           reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Int             reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Long            reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Signed          reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Unsigned        reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Float           reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    Double          reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    identifier      reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    l_paren         reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)
    tilde           reduce using rule 113 (SIMPLE_TYPE_NAME -> Float .)


state 5

    (51) CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .
    (53) LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION . pipe_pipe LOGICAL_AND_EXPRESSION

    r_paren         reduce using rule 51 (CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .)
    comma           reduce using rule 51 (CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .)
    semicolon       reduce using rule 51 (CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .)
    r_bracket       reduce using rule 51 (CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .)
    left_shift      reduce using rule 51 (CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION .)
    pipe_pipe       shift and go to state 52


state 6

    (91) PRIMARY_EXPRESSION -> l_paren . EXPRESSION r_paren
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 53
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 7

    (5) GLOBAL_STATEMENT -> DECLARATION_STATEMENT .

    Int             reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    semicolon       reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    plus_plus       reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    minus_minus     reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    l_paren         reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    star            reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    ampersand       reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    plus            reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    minus           reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    exclamation     reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    tilde           reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Char            reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Short           reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Long            reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Signed          reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Unsigned        reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Float           reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    Double          reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    integer_constant reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    character_constant reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    floating_constant reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    string_literal  reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)
    identifier      reduce using rule 5 (GLOBAL_STATEMENT -> DECLARATION_STATEMENT .)


state 8

    (62) EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .
    (66) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gte SHIFT_EXPRESSION

    equal_equal     reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    notequal        reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    ampersand       reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    cap             reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    pipe            reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    ampersand_ampersand reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    pipe_pipe       reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    comma           reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    left_shift      reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    semicolon       reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    r_paren         reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    r_bracket       reduce using rule 62 (EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION .)
    lt              shift and go to state 56
    gt              shift and go to state 55
    lte             shift and go to state 58
    gte             shift and go to state 57


state 9

    (78) UNARY_EXPRESSION -> PRIMARY_EXPRESSION .

    star            reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    slash           reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    mod             reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    plus            reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    minus           reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    lt              reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    gt              reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    lte             reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    gte             reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    equal_equal     reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    notequal        reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    ampersand       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    cap             reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    pipe            reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    pipe_pipe       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    semicolon       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    comma           reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    r_paren         reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    left_shift      reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    r_bracket       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    equal           reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    star_equal      reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    slash_equal     reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    mod_equal       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    plus_equal      reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    minus_equal     reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    left_shift_equal reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    right_shift_equal reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    ampersand_equal reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    cap_equal       reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)
    pipe_equal      reduce using rule 78 (UNARY_EXPRESSION -> PRIMARY_EXPRESSION .)


state 10

    (84) UNARY_OPERATOR -> plus .

    plus_plus       reduce using rule 84 (UNARY_OPERATOR -> plus .)
    minus_minus     reduce using rule 84 (UNARY_OPERATOR -> plus .)
    l_paren         reduce using rule 84 (UNARY_OPERATOR -> plus .)
    star            reduce using rule 84 (UNARY_OPERATOR -> plus .)
    ampersand       reduce using rule 84 (UNARY_OPERATOR -> plus .)
    plus            reduce using rule 84 (UNARY_OPERATOR -> plus .)
    minus           reduce using rule 84 (UNARY_OPERATOR -> plus .)
    exclamation     reduce using rule 84 (UNARY_OPERATOR -> plus .)
    tilde           reduce using rule 84 (UNARY_OPERATOR -> plus .)
    integer_constant reduce using rule 84 (UNARY_OPERATOR -> plus .)
    character_constant reduce using rule 84 (UNARY_OPERATOR -> plus .)
    floating_constant reduce using rule 84 (UNARY_OPERATOR -> plus .)
    string_literal  reduce using rule 84 (UNARY_OPERATOR -> plus .)
    identifier      reduce using rule 84 (UNARY_OPERATOR -> plus .)


state 11

    (6) MAIN -> Int . Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace
    (109) SIMPLE_TYPE_NAME -> Int .

    Main            shift and go to state 59
    Char            reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Short           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Int             reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Long            reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Signed          reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Unsigned        reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Float           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Double          reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    l_paren         reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    identifier      reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    tilde           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)


state 12

    (86) UNARY_OPERATOR -> exclamation .

    plus_plus       reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    minus_minus     reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    l_paren         reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    star            reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    ampersand       reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    plus            reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    minus           reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    exclamation     reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    tilde           reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    integer_constant reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    character_constant reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    floating_constant reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    string_literal  reduce using rule 86 (UNARY_OPERATOR -> exclamation .)
    identifier      reduce using rule 86 (UNARY_OPERATOR -> exclamation .)


state 13

    (20) EXPRESSION_STATEMENT -> semicolon .

    Return          reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    semicolon       reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    If              reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Break           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Continue        reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    While           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Cout            reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    plus_plus       reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    minus_minus     reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Char            reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Short           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Int             reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Long            reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Signed          reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Unsigned        reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Float           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    Double          reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    l_paren         reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    star            reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    ampersand       reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    plus            reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    minus           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    exclamation     reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    tilde           reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    identifier      reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    integer_constant reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    character_constant reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    floating_constant reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    string_literal  reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)
    r_brace         reduce using rule 20 (EXPRESSION_STATEMENT -> semicolon .)


state 14

    (111) SIMPLE_TYPE_NAME -> Signed .

    Char            reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Short           reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Int             reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Long            reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Signed          reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Unsigned        reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Float           reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    Double          reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    identifier      reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    l_paren         reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)
    tilde           reduce using rule 111 (SIMPLE_TYPE_NAME -> Signed .)


state 15

    (52) LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .
    (55) LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION . ampersand_ampersand INCLUSIVE_OR_EXPRESSION

    pipe_pipe       reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    r_paren         reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    comma           reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    semicolon       reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    left_shift      reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    r_bracket       reduce using rule 52 (LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION .)
    ampersand_ampersand shift and go to state 60


state 16

    (90) PRIMARY_EXPRESSION -> LITERAL .

    star            reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    slash           reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    mod             reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    plus            reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    minus           reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    lt              reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    gt              reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    lte             reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    gte             reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    equal_equal     reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    notequal        reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    ampersand       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    cap             reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    pipe            reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    ampersand_ampersand reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    pipe_pipe       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    semicolon       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    comma           reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    r_paren         reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    left_shift      reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    r_bracket       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    equal           reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    star_equal      reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    slash_equal     reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    mod_equal       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    plus_equal      reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    minus_equal     reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    left_shift_equal reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    right_shift_equal reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    ampersand_equal reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    cap_equal       reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)
    pipe_equal      reduce using rule 90 (PRIMARY_EXPRESSION -> LITERAL .)


state 17

    (2) PROGRAM -> MAIN .

    $end            reduce using rule 2 (PROGRAM -> MAIN .)


state 18

    (39) ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION . ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .
    (40) ASSIGNMENT_OPERATOR -> . equal
    (41) ASSIGNMENT_OPERATOR -> . star_equal
    (42) ASSIGNMENT_OPERATOR -> . slash_equal
    (43) ASSIGNMENT_OPERATOR -> . mod_equal
    (44) ASSIGNMENT_OPERATOR -> . plus_equal
    (45) ASSIGNMENT_OPERATOR -> . minus_equal
    (46) ASSIGNMENT_OPERATOR -> . left_shift_equal
    (47) ASSIGNMENT_OPERATOR -> . right_shift_equal
    (48) ASSIGNMENT_OPERATOR -> . ampersand_equal
    (49) ASSIGNMENT_OPERATOR -> . cap_equal
    (50) ASSIGNMENT_OPERATOR -> . pipe_equal

    star            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    slash           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    mod             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    plus            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    minus           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    lt              reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    gt              reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    lte             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    gte             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    equal_equal     reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    notequal        reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    ampersand       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    cap             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    pipe            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    comma           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    left_shift      reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    semicolon       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    r_paren         reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    equal           shift and go to state 70
    star_equal      shift and go to state 72
    slash_equal     shift and go to state 62
    mod_equal       shift and go to state 63
    plus_equal      shift and go to state 68
    minus_equal     shift and go to state 66
    left_shift_equal shift and go to state 61
    right_shift_equal shift and go to state 67
    ampersand_equal shift and go to state 64
    cap_equal       shift and go to state 69
    pipe_equal      shift and go to state 71

    ASSIGNMENT_OPERATOR            shift and go to state 65

state 19

    (104) DECL_SPECIFIERS -> TYPE_SPECIFIER .

    Char            reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Short           reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Int             reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Long            reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Signed          reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Unsigned        reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Float           reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    Double          reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    l_paren         reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    identifier      reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)
    tilde           reduce using rule 104 (DECL_SPECIFIERS -> TYPE_SPECIFIER .)


state 20

    (35) DECLARATION_STATEMENT -> DECLARATION .

    Int             reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    semicolon       reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    plus_plus       reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    minus_minus     reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    l_paren         reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    star            reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    ampersand       reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    plus            reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    minus           reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    exclamation     reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    tilde           reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Char            reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Short           reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Long            reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Signed          reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Unsigned        reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Float           reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    Double          reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    integer_constant reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    character_constant reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    floating_constant reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    string_literal  reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)
    identifier      reduce using rule 35 (DECLARATION_STATEMENT -> DECLARATION .)


state 21

    (23) GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .

    Int             reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    semicolon       reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    plus_plus       reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    minus_minus     reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    l_paren         reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    star            reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    ampersand       reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    plus            reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    minus           reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    exclamation     reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    tilde           reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Char            reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Short           reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Long            reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Signed          reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Unsigned        reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Float           reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    Double          reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    integer_constant reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    character_constant reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    floating_constant reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    string_literal  reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)
    identifier      reduce using rule 23 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT .)


state 22

    (99) DECLARATION -> DECL_SPECIFIERS . DECLARATOR_LIST semicolon
    (103) DECL_SPECIFIERS -> DECL_SPECIFIERS . TYPE_SPECIFIER
    (116) DECLARATOR_LIST -> . INIT_DECLARATOR
    (105) TYPE_SPECIFIER -> . SIMPLE_TYPE_NAME
    (118) INIT_DECLARATOR -> . DECLARATOR INITIALIZER
    (119) INIT_DECLARATOR -> . DECLARATOR
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (122) DECLARATOR -> . DNAME
    (123) DECLARATOR -> . DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
    (124) DECLARATOR -> . DECLARATOR l_bracket r_bracket
    (125) DECLARATOR -> . l_paren DECLARATOR r_paren
    (94) NAME -> . identifier
    (130) DNAME -> . NAME
    (131) DNAME -> . tilde NAME

    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    l_paren         shift and go to state 78
    identifier      shift and go to state 35
    tilde           shift and go to state 74

    INIT_DECLARATOR                shift and go to state 76
    SIMPLE_TYPE_NAME               shift and go to state 38
    DECLARATOR_LIST                shift and go to state 73
    NAME                           shift and go to state 77
    DNAME                          shift and go to state 75
    DECLARATOR                     shift and go to state 81
    TYPE_SPECIFIER                 shift and go to state 80

state 23

    (0) S' -> PROGRAM .



state 24

    (107) SIMPLE_TYPE_NAME -> Char .

    Char            reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Short           reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Int             reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Long            reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Signed          reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Unsigned        reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Float           reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    Double          reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    identifier      reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    l_paren         reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)
    tilde           reduce using rule 107 (SIMPLE_TYPE_NAME -> Char .)


state 25

    (110) SIMPLE_TYPE_NAME -> Long .

    Char            reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Short           reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Int             reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Long            reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Signed          reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Unsigned        reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Float           reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    Double          reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    identifier      reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    l_paren         reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)
    tilde           reduce using rule 110 (SIMPLE_TYPE_NAME -> Long .)


state 26

    (114) SIMPLE_TYPE_NAME -> Double .

    Char            reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Short           reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Int             reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Long            reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Signed          reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Unsigned        reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Float           reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    Double          reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    identifier      reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    l_paren         reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)
    tilde           reduce using rule 114 (SIMPLE_TYPE_NAME -> Double .)


state 27

    (58) EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .
    (61) AND_EXPRESSION -> AND_EXPRESSION . ampersand EQUALITY_EXPRESSION

    cap             reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    pipe            reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    ampersand_ampersand reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    pipe_pipe       reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    r_bracket       reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    r_paren         reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    comma           reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    semicolon       reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    left_shift      reduce using rule 58 (EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION .)
    ampersand       shift and go to state 82


state 28

    (108) SIMPLE_TYPE_NAME -> Short .

    Char            reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Short           reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Int             reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Long            reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Signed          reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Unsigned        reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Float           reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    Double          reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    identifier      reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    l_paren         reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)
    tilde           reduce using rule 108 (SIMPLE_TYPE_NAME -> Short .)


state 29

    (95) LITERAL -> integer_constant .

    star            reduce using rule 95 (LITERAL -> integer_constant .)
    slash           reduce using rule 95 (LITERAL -> integer_constant .)
    mod             reduce using rule 95 (LITERAL -> integer_constant .)
    plus            reduce using rule 95 (LITERAL -> integer_constant .)
    minus           reduce using rule 95 (LITERAL -> integer_constant .)
    lt              reduce using rule 95 (LITERAL -> integer_constant .)
    gt              reduce using rule 95 (LITERAL -> integer_constant .)
    lte             reduce using rule 95 (LITERAL -> integer_constant .)
    gte             reduce using rule 95 (LITERAL -> integer_constant .)
    equal_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    notequal        reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand       reduce using rule 95 (LITERAL -> integer_constant .)
    cap             reduce using rule 95 (LITERAL -> integer_constant .)
    pipe            reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand_ampersand reduce using rule 95 (LITERAL -> integer_constant .)
    pipe_pipe       reduce using rule 95 (LITERAL -> integer_constant .)
    semicolon       reduce using rule 95 (LITERAL -> integer_constant .)
    comma           reduce using rule 95 (LITERAL -> integer_constant .)
    r_paren         reduce using rule 95 (LITERAL -> integer_constant .)
    left_shift      reduce using rule 95 (LITERAL -> integer_constant .)
    r_bracket       reduce using rule 95 (LITERAL -> integer_constant .)
    equal           reduce using rule 95 (LITERAL -> integer_constant .)
    star_equal      reduce using rule 95 (LITERAL -> integer_constant .)
    slash_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    mod_equal       reduce using rule 95 (LITERAL -> integer_constant .)
    plus_equal      reduce using rule 95 (LITERAL -> integer_constant .)
    minus_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    left_shift_equal reduce using rule 95 (LITERAL -> integer_constant .)
    right_shift_equal reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand_equal reduce using rule 95 (LITERAL -> integer_constant .)
    cap_equal       reduce using rule 95 (LITERAL -> integer_constant .)
    pipe_equal      reduce using rule 95 (LITERAL -> integer_constant .)


state 30

    (1) PROGRAM -> GLOBAL_STATEMENT_LIST . MAIN
    (24) GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST . GLOBAL_STATEMENT
    (6) MAIN -> . Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace
    (4) GLOBAL_STATEMENT -> . EXPRESSION_STATEMENT
    (5) GLOBAL_STATEMENT -> . DECLARATION_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (35) DECLARATION_STATEMENT -> . DECLARATION
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (99) DECLARATION -> . DECL_SPECIFIERS DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (103) DECL_SPECIFIERS -> . DECL_SPECIFIERS TYPE_SPECIFIER
    (104) DECL_SPECIFIERS -> . TYPE_SPECIFIER
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (105) TYPE_SPECIFIER -> . SIMPLE_TYPE_NAME
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    Int             shift and go to state 11
    semicolon       shift and go to state 13
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    Char            shift and go to state 24
    Short           shift and go to state 28
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    DECLARATION                    shift and go to state 20
    GLOBAL_STATEMENT               shift and go to state 84
    DECL_SPECIFIERS                shift and go to state 22
    MAIN                           shift and go to state 83
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 33
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    DECLARATION_STATEMENT          shift and go to state 7
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    SIMPLE_TYPE_NAME               shift and go to state 38
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    EXPRESSION_STATEMENT           shift and go to state 34
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    UNARY_EXPRESSION               shift and go to state 18
    TYPE_SPECIFIER                 shift and go to state 19

state 31

    (19) EXPRESSION_STATEMENT -> EXPRESSION . semicolon
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION

    semicolon       shift and go to state 86
    comma           shift and go to state 85


state 32

    (98) LITERAL -> string_literal .

    star            reduce using rule 98 (LITERAL -> string_literal .)
    slash           reduce using rule 98 (LITERAL -> string_literal .)
    mod             reduce using rule 98 (LITERAL -> string_literal .)
    plus            reduce using rule 98 (LITERAL -> string_literal .)
    minus           reduce using rule 98 (LITERAL -> string_literal .)
    lt              reduce using rule 98 (LITERAL -> string_literal .)
    gt              reduce using rule 98 (LITERAL -> string_literal .)
    lte             reduce using rule 98 (LITERAL -> string_literal .)
    gte             reduce using rule 98 (LITERAL -> string_literal .)
    equal_equal     reduce using rule 98 (LITERAL -> string_literal .)
    notequal        reduce using rule 98 (LITERAL -> string_literal .)
    ampersand       reduce using rule 98 (LITERAL -> string_literal .)
    cap             reduce using rule 98 (LITERAL -> string_literal .)
    pipe            reduce using rule 98 (LITERAL -> string_literal .)
    ampersand_ampersand reduce using rule 98 (LITERAL -> string_literal .)
    pipe_pipe       reduce using rule 98 (LITERAL -> string_literal .)
    semicolon       reduce using rule 98 (LITERAL -> string_literal .)
    comma           reduce using rule 98 (LITERAL -> string_literal .)
    r_paren         reduce using rule 98 (LITERAL -> string_literal .)
    left_shift      reduce using rule 98 (LITERAL -> string_literal .)
    r_bracket       reduce using rule 98 (LITERAL -> string_literal .)
    equal           reduce using rule 98 (LITERAL -> string_literal .)
    star_equal      reduce using rule 98 (LITERAL -> string_literal .)
    slash_equal     reduce using rule 98 (LITERAL -> string_literal .)
    mod_equal       reduce using rule 98 (LITERAL -> string_literal .)
    plus_equal      reduce using rule 98 (LITERAL -> string_literal .)
    minus_equal     reduce using rule 98 (LITERAL -> string_literal .)
    left_shift_equal reduce using rule 98 (LITERAL -> string_literal .)
    right_shift_equal reduce using rule 98 (LITERAL -> string_literal .)
    ampersand_equal reduce using rule 98 (LITERAL -> string_literal .)
    cap_equal       reduce using rule 98 (LITERAL -> string_literal .)
    pipe_equal      reduce using rule 98 (LITERAL -> string_literal .)


state 33

    (92) PRIMARY_EXPRESSION -> NAME .
    (93) PRIMARY_EXPRESSION -> NAME . l_bracket integer_constant r_bracket
    (106) SIMPLE_TYPE_NAME -> NAME .

    equal           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    star_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    left_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    right_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    star            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    equal_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    notequal        reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_ampersand reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_pipe       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    semicolon       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    comma           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    l_bracket       shift and go to state 87
    Char            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Short           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Int             reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Long            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Signed          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Unsigned        reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Float           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Double          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_paren         reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    identifier      reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    tilde           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)


state 34

    (4) GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .

    Int             reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    semicolon       reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    plus_plus       reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    minus_minus     reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    l_paren         reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    star            reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    ampersand       reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    plus            reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    minus           reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    exclamation     reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    tilde           reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Char            reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Short           reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Long            reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Signed          reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Unsigned        reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Float           reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    Double          reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    integer_constant reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    character_constant reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    floating_constant reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    string_literal  reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)
    identifier      reduce using rule 4 (GLOBAL_STATEMENT -> EXPRESSION_STATEMENT .)


state 35

    (94) NAME -> identifier .

    l_bracket       reduce using rule 94 (NAME -> identifier .)
    star            reduce using rule 94 (NAME -> identifier .)
    slash           reduce using rule 94 (NAME -> identifier .)
    mod             reduce using rule 94 (NAME -> identifier .)
    plus            reduce using rule 94 (NAME -> identifier .)
    minus           reduce using rule 94 (NAME -> identifier .)
    lt              reduce using rule 94 (NAME -> identifier .)
    gt              reduce using rule 94 (NAME -> identifier .)
    lte             reduce using rule 94 (NAME -> identifier .)
    gte             reduce using rule 94 (NAME -> identifier .)
    equal_equal     reduce using rule 94 (NAME -> identifier .)
    notequal        reduce using rule 94 (NAME -> identifier .)
    ampersand       reduce using rule 94 (NAME -> identifier .)
    cap             reduce using rule 94 (NAME -> identifier .)
    pipe            reduce using rule 94 (NAME -> identifier .)
    ampersand_ampersand reduce using rule 94 (NAME -> identifier .)
    pipe_pipe       reduce using rule 94 (NAME -> identifier .)
    semicolon       reduce using rule 94 (NAME -> identifier .)
    comma           reduce using rule 94 (NAME -> identifier .)
    r_paren         reduce using rule 94 (NAME -> identifier .)
    left_shift      reduce using rule 94 (NAME -> identifier .)
    r_bracket       reduce using rule 94 (NAME -> identifier .)
    equal           reduce using rule 94 (NAME -> identifier .)
    star_equal      reduce using rule 94 (NAME -> identifier .)
    slash_equal     reduce using rule 94 (NAME -> identifier .)
    mod_equal       reduce using rule 94 (NAME -> identifier .)
    plus_equal      reduce using rule 94 (NAME -> identifier .)
    minus_equal     reduce using rule 94 (NAME -> identifier .)
    left_shift_equal reduce using rule 94 (NAME -> identifier .)
    right_shift_equal reduce using rule 94 (NAME -> identifier .)
    ampersand_equal reduce using rule 94 (NAME -> identifier .)
    cap_equal       reduce using rule 94 (NAME -> identifier .)
    pipe_equal      reduce using rule 94 (NAME -> identifier .)
    Char            reduce using rule 94 (NAME -> identifier .)
    Short           reduce using rule 94 (NAME -> identifier .)
    Int             reduce using rule 94 (NAME -> identifier .)
    Long            reduce using rule 94 (NAME -> identifier .)
    Signed          reduce using rule 94 (NAME -> identifier .)
    Unsigned        reduce using rule 94 (NAME -> identifier .)
    Float           reduce using rule 94 (NAME -> identifier .)
    Double          reduce using rule 94 (NAME -> identifier .)
    identifier      reduce using rule 94 (NAME -> identifier .)
    l_paren         reduce using rule 94 (NAME -> identifier .)
    tilde           reduce using rule 94 (NAME -> identifier .)


state 36

    (87) UNARY_OPERATOR -> tilde .

    plus_plus       reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    minus_minus     reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    l_paren         reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    star            reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    ampersand       reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    plus            reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    minus           reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    exclamation     reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    tilde           reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    integer_constant reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    character_constant reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    floating_constant reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    string_literal  reduce using rule 87 (UNARY_OPERATOR -> tilde .)
    identifier      reduce using rule 87 (UNARY_OPERATOR -> tilde .)


state 37

    (71) ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .
    (75) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . mod UNARY_EXPRESSION

    plus            reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    minus           reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    lt              reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    gt              reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    lte             reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    gte             reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    equal_equal     reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    notequal        reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    ampersand       reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    cap             reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    pipe            reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    ampersand_ampersand reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    pipe_pipe       reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    semicolon       reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    r_bracket       reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    comma           reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    r_paren         reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    left_shift      reduce using rule 71 (ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION .)
    star            shift and go to state 88
    slash           shift and go to state 90
    mod             shift and go to state 89


state 38

    (105) TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .

    Char            reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Short           reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Int             reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Long            reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Signed          reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Unsigned        reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Float           reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    Double          reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    l_paren         reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    identifier      reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)
    tilde           reduce using rule 105 (TYPE_SPECIFIER -> SIMPLE_TYPE_NAME .)


state 39

    (80) UNARY_EXPRESSION -> plus_plus . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 91
    PRIMARY_EXPRESSION             shift and go to state 9

state 40

    (97) LITERAL -> floating_constant .

    star            reduce using rule 97 (LITERAL -> floating_constant .)
    slash           reduce using rule 97 (LITERAL -> floating_constant .)
    mod             reduce using rule 97 (LITERAL -> floating_constant .)
    plus            reduce using rule 97 (LITERAL -> floating_constant .)
    minus           reduce using rule 97 (LITERAL -> floating_constant .)
    lt              reduce using rule 97 (LITERAL -> floating_constant .)
    gt              reduce using rule 97 (LITERAL -> floating_constant .)
    lte             reduce using rule 97 (LITERAL -> floating_constant .)
    gte             reduce using rule 97 (LITERAL -> floating_constant .)
    equal_equal     reduce using rule 97 (LITERAL -> floating_constant .)
    notequal        reduce using rule 97 (LITERAL -> floating_constant .)
    ampersand       reduce using rule 97 (LITERAL -> floating_constant .)
    cap             reduce using rule 97 (LITERAL -> floating_constant .)
    pipe            reduce using rule 97 (LITERAL -> floating_constant .)
    ampersand_ampersand reduce using rule 97 (LITERAL -> floating_constant .)
    pipe_pipe       reduce using rule 97 (LITERAL -> floating_constant .)
    semicolon       reduce using rule 97 (LITERAL -> floating_constant .)
    comma           reduce using rule 97 (LITERAL -> floating_constant .)
    r_paren         reduce using rule 97 (LITERAL -> floating_constant .)
    left_shift      reduce using rule 97 (LITERAL -> floating_constant .)
    r_bracket       reduce using rule 97 (LITERAL -> floating_constant .)
    equal           reduce using rule 97 (LITERAL -> floating_constant .)
    star_equal      reduce using rule 97 (LITERAL -> floating_constant .)
    slash_equal     reduce using rule 97 (LITERAL -> floating_constant .)
    mod_equal       reduce using rule 97 (LITERAL -> floating_constant .)
    plus_equal      reduce using rule 97 (LITERAL -> floating_constant .)
    minus_equal     reduce using rule 97 (LITERAL -> floating_constant .)
    left_shift_equal reduce using rule 97 (LITERAL -> floating_constant .)
    right_shift_equal reduce using rule 97 (LITERAL -> floating_constant .)
    ampersand_equal reduce using rule 97 (LITERAL -> floating_constant .)
    cap_equal       reduce using rule 97 (LITERAL -> floating_constant .)
    pipe_equal      reduce using rule 97 (LITERAL -> floating_constant .)


state 41

    (96) LITERAL -> character_constant .

    star            reduce using rule 96 (LITERAL -> character_constant .)
    slash           reduce using rule 96 (LITERAL -> character_constant .)
    mod             reduce using rule 96 (LITERAL -> character_constant .)
    plus            reduce using rule 96 (LITERAL -> character_constant .)
    minus           reduce using rule 96 (LITERAL -> character_constant .)
    lt              reduce using rule 96 (LITERAL -> character_constant .)
    gt              reduce using rule 96 (LITERAL -> character_constant .)
    lte             reduce using rule 96 (LITERAL -> character_constant .)
    gte             reduce using rule 96 (LITERAL -> character_constant .)
    equal_equal     reduce using rule 96 (LITERAL -> character_constant .)
    notequal        reduce using rule 96 (LITERAL -> character_constant .)
    ampersand       reduce using rule 96 (LITERAL -> character_constant .)
    cap             reduce using rule 96 (LITERAL -> character_constant .)
    pipe            reduce using rule 96 (LITERAL -> character_constant .)
    ampersand_ampersand reduce using rule 96 (LITERAL -> character_constant .)
    pipe_pipe       reduce using rule 96 (LITERAL -> character_constant .)
    semicolon       reduce using rule 96 (LITERAL -> character_constant .)
    comma           reduce using rule 96 (LITERAL -> character_constant .)
    r_paren         reduce using rule 96 (LITERAL -> character_constant .)
    left_shift      reduce using rule 96 (LITERAL -> character_constant .)
    r_bracket       reduce using rule 96 (LITERAL -> character_constant .)
    equal           reduce using rule 96 (LITERAL -> character_constant .)
    star_equal      reduce using rule 96 (LITERAL -> character_constant .)
    slash_equal     reduce using rule 96 (LITERAL -> character_constant .)
    mod_equal       reduce using rule 96 (LITERAL -> character_constant .)
    plus_equal      reduce using rule 96 (LITERAL -> character_constant .)
    minus_equal     reduce using rule 96 (LITERAL -> character_constant .)
    left_shift_equal reduce using rule 96 (LITERAL -> character_constant .)
    right_shift_equal reduce using rule 96 (LITERAL -> character_constant .)
    ampersand_equal reduce using rule 96 (LITERAL -> character_constant .)
    cap_equal       reduce using rule 96 (LITERAL -> character_constant .)
    pipe_equal      reduce using rule 96 (LITERAL -> character_constant .)


state 42

    (112) SIMPLE_TYPE_NAME -> Unsigned .

    Char            reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Short           reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Int             reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Long            reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Signed          reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Unsigned        reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Float           reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    Double          reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    identifier      reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    l_paren         reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)
    tilde           reduce using rule 112 (SIMPLE_TYPE_NAME -> Unsigned .)


state 43

    (54) LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .
    (57) INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION . pipe EXCLUSIVE_OR_EXPRESSION

    ampersand_ampersand reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    pipe_pipe       reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    semicolon       reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    comma           reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    r_paren         reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    left_shift      reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    r_bracket       reduce using rule 54 (LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION .)
    pipe            shift and go to state 92


state 44

    (60) AND_EXPRESSION -> EQUALITY_EXPRESSION .
    (63) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION . equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION . notequal RELATIONAL_EXPRESSION

    ampersand       reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    cap             reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    pipe            reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    ampersand_ampersand reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    pipe_pipe       reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    semicolon       reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    comma           reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    r_paren         reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    left_shift      reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    r_bracket       reduce using rule 60 (AND_EXPRESSION -> EQUALITY_EXPRESSION .)
    equal_equal     shift and go to state 93
    notequal        shift and go to state 94


state 45

    (70) SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .
    (72) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION . plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION . minus MULTIPLICATIVE_EXPRESSION

    lt              reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    gt              reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    lte             reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    gte             reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    equal_equal     reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    notequal        reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    ampersand       reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    cap             reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    pipe            reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    ampersand_ampersand reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    pipe_pipe       reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    semicolon       reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    comma           reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    r_paren         reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    left_shift      reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    r_bracket       reduce using rule 70 (SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION .)
    plus            shift and go to state 95
    minus           shift and go to state 96


state 46

    (38) ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION .

    semicolon       reduce using rule 38 (ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION .)
    comma           reduce using rule 38 (ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION .)
    r_paren         reduce using rule 38 (ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION .)
    left_shift      reduce using rule 38 (ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION .)


state 47

    (79) UNARY_EXPRESSION -> UNARY_OPERATOR . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 97
    PRIMARY_EXPRESSION             shift and go to state 9

state 48

    (56) INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .
    (59) EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION . cap AND_EXPRESSION

    pipe            reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    ampersand_ampersand reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    pipe_pipe       reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    semicolon       reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    comma           reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    r_paren         reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    left_shift      reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    r_bracket       reduce using rule 56 (INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION .)
    cap             shift and go to state 98


state 49

    (36) EXPRESSION -> ASSIGNMENT_EXPRESSION .

    semicolon       reduce using rule 36 (EXPRESSION -> ASSIGNMENT_EXPRESSION .)
    comma           reduce using rule 36 (EXPRESSION -> ASSIGNMENT_EXPRESSION .)
    left_shift      reduce using rule 36 (EXPRESSION -> ASSIGNMENT_EXPRESSION .)
    r_paren         reduce using rule 36 (EXPRESSION -> ASSIGNMENT_EXPRESSION .)


state 50

    (81) UNARY_EXPRESSION -> minus_minus . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 99
    PRIMARY_EXPRESSION             shift and go to state 9

state 51

    (83) UNARY_OPERATOR -> ampersand .

    plus_plus       reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    minus_minus     reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    l_paren         reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    star            reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    ampersand       reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    plus            reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    minus           reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    exclamation     reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    tilde           reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    integer_constant reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    character_constant reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    floating_constant reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    string_literal  reduce using rule 83 (UNARY_OPERATOR -> ampersand .)
    identifier      reduce using rule 83 (UNARY_OPERATOR -> ampersand .)


state 52

    (53) LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe . LOGICAL_AND_EXPRESSION
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    EQUALITY_EXPRESSION            shift and go to state 44
    RELATIONAL_EXPRESSION          shift and go to state 8
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    LOGICAL_AND_EXPRESSION         shift and go to state 100
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_OPERATOR                 shift and go to state 47

state 53

    (91) PRIMARY_EXPRESSION -> l_paren EXPRESSION . r_paren
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION

    r_paren         shift and go to state 102
    comma           shift and go to state 85


state 54

    (92) PRIMARY_EXPRESSION -> NAME .
    (93) PRIMARY_EXPRESSION -> NAME . l_bracket integer_constant r_bracket

    star            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    equal_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    notequal        reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_ampersand reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_pipe       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    semicolon       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    comma           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    r_paren         reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    left_shift      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    r_bracket       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    equal           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    star_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    left_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    right_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    l_bracket       shift and go to state 87


state 55

    (67) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt . SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 103
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 56

    (66) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt . SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 104
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 57

    (69) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte . SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 105
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 58

    (68) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte . SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 106
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 59

    (6) MAIN -> Int Main . l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace

    l_paren         shift and go to state 107


state 60

    (55) LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand . INCLUSIVE_OR_EXPRESSION
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    EQUALITY_EXPRESSION            shift and go to state 44
    RELATIONAL_EXPRESSION          shift and go to state 8
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 108
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_OPERATOR                 shift and go to state 47

state 61

    (46) ASSIGNMENT_OPERATOR -> left_shift_equal .

    plus_plus       reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    minus_minus     reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    l_paren         reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    star            reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    ampersand       reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    plus            reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    minus           reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    exclamation     reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    tilde           reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    integer_constant reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    character_constant reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    floating_constant reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    string_literal  reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)
    identifier      reduce using rule 46 (ASSIGNMENT_OPERATOR -> left_shift_equal .)


state 62

    (42) ASSIGNMENT_OPERATOR -> slash_equal .

    plus_plus       reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    minus_minus     reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    l_paren         reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    star            reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    ampersand       reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    plus            reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    minus           reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    exclamation     reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    tilde           reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    integer_constant reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    character_constant reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    floating_constant reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    string_literal  reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)
    identifier      reduce using rule 42 (ASSIGNMENT_OPERATOR -> slash_equal .)


state 63

    (43) ASSIGNMENT_OPERATOR -> mod_equal .

    plus_plus       reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    minus_minus     reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    l_paren         reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    star            reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    ampersand       reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    plus            reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    minus           reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    exclamation     reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    tilde           reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    integer_constant reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    character_constant reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    floating_constant reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    string_literal  reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)
    identifier      reduce using rule 43 (ASSIGNMENT_OPERATOR -> mod_equal .)


state 64

    (48) ASSIGNMENT_OPERATOR -> ampersand_equal .

    plus_plus       reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    minus_minus     reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    l_paren         reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    star            reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    ampersand       reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    plus            reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    minus           reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    exclamation     reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    tilde           reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    integer_constant reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    character_constant reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    floating_constant reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    string_literal  reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)
    identifier      reduce using rule 48 (ASSIGNMENT_OPERATOR -> ampersand_equal .)


state 65

    (39) ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR . ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 109
    CONDITIONAL_EXPRESSION         shift and go to state 46
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44

state 66

    (45) ASSIGNMENT_OPERATOR -> minus_equal .

    plus_plus       reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    minus_minus     reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    l_paren         reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    star            reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    ampersand       reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    plus            reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    minus           reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    exclamation     reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    tilde           reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    integer_constant reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    character_constant reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    floating_constant reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    string_literal  reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)
    identifier      reduce using rule 45 (ASSIGNMENT_OPERATOR -> minus_equal .)


state 67

    (47) ASSIGNMENT_OPERATOR -> right_shift_equal .

    plus_plus       reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    minus_minus     reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    l_paren         reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    star            reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    ampersand       reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    plus            reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    minus           reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    exclamation     reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    tilde           reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    integer_constant reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    character_constant reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    floating_constant reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    string_literal  reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)
    identifier      reduce using rule 47 (ASSIGNMENT_OPERATOR -> right_shift_equal .)


state 68

    (44) ASSIGNMENT_OPERATOR -> plus_equal .

    plus_plus       reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    minus_minus     reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    l_paren         reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    star            reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    ampersand       reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    plus            reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    minus           reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    exclamation     reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    tilde           reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    integer_constant reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    character_constant reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    floating_constant reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    string_literal  reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)
    identifier      reduce using rule 44 (ASSIGNMENT_OPERATOR -> plus_equal .)


state 69

    (49) ASSIGNMENT_OPERATOR -> cap_equal .

    plus_plus       reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    minus_minus     reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    l_paren         reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    star            reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    ampersand       reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    plus            reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    minus           reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    exclamation     reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    tilde           reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    integer_constant reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    character_constant reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    floating_constant reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    string_literal  reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)
    identifier      reduce using rule 49 (ASSIGNMENT_OPERATOR -> cap_equal .)


state 70

    (40) ASSIGNMENT_OPERATOR -> equal .

    plus_plus       reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    minus_minus     reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    l_paren         reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    star            reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    ampersand       reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    plus            reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    minus           reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    exclamation     reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    tilde           reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    integer_constant reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    character_constant reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    floating_constant reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    string_literal  reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)
    identifier      reduce using rule 40 (ASSIGNMENT_OPERATOR -> equal .)


state 71

    (50) ASSIGNMENT_OPERATOR -> pipe_equal .

    plus_plus       reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    minus_minus     reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    l_paren         reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    star            reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    ampersand       reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    plus            reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    minus           reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    exclamation     reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    tilde           reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    integer_constant reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    character_constant reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    floating_constant reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    string_literal  reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)
    identifier      reduce using rule 50 (ASSIGNMENT_OPERATOR -> pipe_equal .)


state 72

    (41) ASSIGNMENT_OPERATOR -> star_equal .

    plus_plus       reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    minus_minus     reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    l_paren         reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    star            reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    ampersand       reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    plus            reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    minus           reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    exclamation     reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    tilde           reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    integer_constant reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    character_constant reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    floating_constant reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    string_literal  reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)
    identifier      reduce using rule 41 (ASSIGNMENT_OPERATOR -> star_equal .)


state 73

    (99) DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST . semicolon

    semicolon       shift and go to state 110


state 74

    (131) DNAME -> tilde . NAME
    (94) NAME -> . identifier

    identifier      shift and go to state 35

    NAME                           shift and go to state 111

state 75

    (122) DECLARATOR -> DNAME .

    l_bracket       reduce using rule 122 (DECLARATOR -> DNAME .)
    equal           reduce using rule 122 (DECLARATOR -> DNAME .)
    l_paren         reduce using rule 122 (DECLARATOR -> DNAME .)
    semicolon       reduce using rule 122 (DECLARATOR -> DNAME .)
    r_paren         reduce using rule 122 (DECLARATOR -> DNAME .)


state 76

    (116) DECLARATOR_LIST -> INIT_DECLARATOR .

    semicolon       reduce using rule 116 (DECLARATOR_LIST -> INIT_DECLARATOR .)


state 77

    (106) SIMPLE_TYPE_NAME -> NAME .
    (130) DNAME -> NAME .

  ! reduce/reduce conflict for l_paren resolved using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Char            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Short           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Int             reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Long            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Signed          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Unsigned        reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Float           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Double          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_paren         reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    identifier      reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    tilde           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_bracket       reduce using rule 130 (DNAME -> NAME .)
    equal           reduce using rule 130 (DNAME -> NAME .)
    semicolon       reduce using rule 130 (DNAME -> NAME .)

  ! l_paren         [ reduce using rule 130 (DNAME -> NAME .) ]


state 78

    (125) DECLARATOR -> l_paren . DECLARATOR r_paren
    (122) DECLARATOR -> . DNAME
    (123) DECLARATOR -> . DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
    (124) DECLARATOR -> . DECLARATOR l_bracket r_bracket
    (125) DECLARATOR -> . l_paren DECLARATOR r_paren
    (130) DNAME -> . NAME
    (131) DNAME -> . tilde NAME
    (94) NAME -> . identifier

    l_paren         shift and go to state 78
    tilde           shift and go to state 74
    identifier      shift and go to state 35

    NAME                           shift and go to state 112
    DECLARATOR                     shift and go to state 113
    DNAME                          shift and go to state 75

state 79

    (109) SIMPLE_TYPE_NAME -> Int .

    Char            reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Short           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Int             reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Long            reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Signed          reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Unsigned        reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Float           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    Double          reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    identifier      reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    l_paren         reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)
    tilde           reduce using rule 109 (SIMPLE_TYPE_NAME -> Int .)


state 80

    (103) DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .

    Char            reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Short           reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Int             reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Long            reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Signed          reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Unsigned        reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Float           reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    Double          reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    l_paren         reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    identifier      reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)
    tilde           reduce using rule 103 (DECL_SPECIFIERS -> DECL_SPECIFIERS TYPE_SPECIFIER .)


state 81

    (118) INIT_DECLARATOR -> DECLARATOR . INITIALIZER
    (119) INIT_DECLARATOR -> DECLARATOR .
    (123) DECLARATOR -> DECLARATOR . l_bracket CONSTANT_EXPRESSION r_bracket
    (124) DECLARATOR -> DECLARATOR . l_bracket r_bracket
    (132) INITIALIZER -> . equal ASSIGNMENT_EXPRESSION
    (133) INITIALIZER -> . l_paren EXPRESSION_LIST r_paren

    semicolon       reduce using rule 119 (INIT_DECLARATOR -> DECLARATOR .)
    l_bracket       shift and go to state 117
    equal           shift and go to state 115
    l_paren         shift and go to state 116

    INITIALIZER                    shift and go to state 114

state 82

    (61) AND_EXPRESSION -> AND_EXPRESSION ampersand . EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 8
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    EQUALITY_EXPRESSION            shift and go to state 118
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9

state 83

    (1) PROGRAM -> GLOBAL_STATEMENT_LIST MAIN .

    $end            reduce using rule 1 (PROGRAM -> GLOBAL_STATEMENT_LIST MAIN .)


state 84

    (24) GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .

    Int             reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    semicolon       reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    plus_plus       reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    minus_minus     reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    l_paren         reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    star            reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    ampersand       reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    plus            reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    minus           reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    exclamation     reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    tilde           reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Char            reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Short           reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Long            reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Signed          reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Unsigned        reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Float           reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    Double          reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    integer_constant reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    character_constant reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    floating_constant reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    string_literal  reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)
    identifier      reduce using rule 24 (GLOBAL_STATEMENT_LIST -> GLOBAL_STATEMENT_LIST GLOBAL_STATEMENT .)


state 85

    (37) EXPRESSION -> EXPRESSION comma . ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 119
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 86

    (19) EXPRESSION_STATEMENT -> EXPRESSION semicolon .

    Return          reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    semicolon       reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    If              reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Break           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Continue        reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    While           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Cout            reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    plus_plus       reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    minus_minus     reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Char            reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Short           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Int             reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Long            reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Signed          reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Unsigned        reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Float           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    Double          reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    l_paren         reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    star            reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    ampersand       reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    plus            reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    minus           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    exclamation     reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    tilde           reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    identifier      reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    integer_constant reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    character_constant reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    floating_constant reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    string_literal  reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)
    r_brace         reduce using rule 19 (EXPRESSION_STATEMENT -> EXPRESSION semicolon .)


state 87

    (93) PRIMARY_EXPRESSION -> NAME l_bracket . integer_constant r_bracket

    integer_constant shift and go to state 120


state 88

    (75) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 121
    PRIMARY_EXPRESSION             shift and go to state 9

state 89

    (77) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 122
    PRIMARY_EXPRESSION             shift and go to state 9

state 90

    (76) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash . UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LITERAL                        shift and go to state 16
    UNARY_OPERATOR                 shift and go to state 47
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 123
    PRIMARY_EXPRESSION             shift and go to state 9

state 91

    (80) UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .

    star            reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    slash           reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    mod             reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    plus            reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    minus           reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    lt              reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    gt              reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    lte             reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    gte             reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    equal_equal     reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    notequal        reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    ampersand       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    cap             reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    pipe            reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    semicolon       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    comma           reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    r_paren         reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    left_shift      reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    r_bracket       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    equal           reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    star_equal      reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    slash_equal     reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    mod_equal       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    plus_equal      reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    minus_equal     reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    left_shift_equal reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    right_shift_equal reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    ampersand_equal reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    cap_equal       reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)
    pipe_equal      reduce using rule 80 (UNARY_EXPRESSION -> plus_plus UNARY_EXPRESSION .)


state 92

    (57) INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe . EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 8
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    EQUALITY_EXPRESSION            shift and go to state 44
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 124
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_OPERATOR                 shift and go to state 47

state 93

    (63) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal . RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 125
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 1
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 94

    (64) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal . RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 126
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    UNARY_OPERATOR                 shift and go to state 47
    ADDITIVE_EXPRESSION            shift and go to state 45
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    SHIFT_EXPRESSION               shift and go to state 1
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_EXPRESSION               shift and go to state 101

state 95

    (72) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus . MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 127
    UNARY_OPERATOR                 shift and go to state 47
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9

state 96

    (73) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus . MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    MULTIPLICATIVE_EXPRESSION      shift and go to state 128
    UNARY_OPERATOR                 shift and go to state 47
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9

state 97

    (79) UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .

    star            reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    slash           reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    mod             reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    plus            reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    minus           reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    lt              reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    gt              reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    lte             reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    gte             reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    equal_equal     reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    notequal        reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    ampersand       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    cap             reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    pipe            reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    semicolon       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    comma           reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    r_paren         reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    left_shift      reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    r_bracket       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    equal           reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    star_equal      reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    slash_equal     reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    mod_equal       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    plus_equal      reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    minus_equal     reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    left_shift_equal reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    right_shift_equal reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    ampersand_equal reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    cap_equal       reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)
    pipe_equal      reduce using rule 79 (UNARY_EXPRESSION -> UNARY_OPERATOR UNARY_EXPRESSION .)


state 98

    (59) EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap . AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 8
    AND_EXPRESSION                 shift and go to state 129
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    EQUALITY_EXPRESSION            shift and go to state 44
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_OPERATOR                 shift and go to state 47

state 99

    (81) UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .

    star            reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    slash           reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    mod             reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    plus            reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    minus           reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    lt              reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    gt              reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    lte             reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    gte             reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    equal_equal     reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    notequal        reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    ampersand       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    cap             reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    pipe            reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    semicolon       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    comma           reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    r_paren         reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    left_shift      reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    r_bracket       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    equal           reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    star_equal      reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    slash_equal     reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    mod_equal       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    plus_equal      reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    minus_equal     reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    left_shift_equal reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    right_shift_equal reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    ampersand_equal reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    cap_equal       reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)
    pipe_equal      reduce using rule 81 (UNARY_EXPRESSION -> minus_minus UNARY_EXPRESSION .)


state 100

    (53) LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .
    (55) LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION . ampersand_ampersand INCLUSIVE_OR_EXPRESSION

    pipe_pipe       reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    r_paren         reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    comma           reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    semicolon       reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    left_shift      reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    r_bracket       reduce using rule 53 (LOGICAL_OR_EXPRESSION -> LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION .)
    ampersand_ampersand shift and go to state 60


state 101

    (74) MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .

    star            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    slash           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    mod             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    plus            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    minus           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    lt              reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    gt              reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    lte             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    gte             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    equal_equal     reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    notequal        reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    ampersand       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    cap             reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    pipe            reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    semicolon       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    comma           reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    r_paren         reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    left_shift      reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)
    r_bracket       reduce using rule 74 (MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION .)


state 102

    (91) PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .

    star            reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    slash           reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    mod             reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    plus            reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    minus           reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    lt              reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    gt              reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    lte             reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    gte             reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    equal_equal     reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    notequal        reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    ampersand       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    cap             reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    pipe            reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    ampersand_ampersand reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    pipe_pipe       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    semicolon       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    comma           reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    r_paren         reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    left_shift      reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    r_bracket       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    equal           reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    star_equal      reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    slash_equal     reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    mod_equal       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    plus_equal      reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    minus_equal     reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    left_shift_equal reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    right_shift_equal reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    ampersand_equal reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    cap_equal       reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)
    pipe_equal      reduce using rule 91 (PRIMARY_EXPRESSION -> l_paren EXPRESSION r_paren .)


state 103

    (67) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .

    lt              reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    gt              reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    lte             reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    gte             reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    equal_equal     reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    notequal        reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    ampersand       reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    cap             reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    pipe            reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    ampersand_ampersand reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    pipe_pipe       reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    semicolon       reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    r_paren         reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    comma           reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    left_shift      reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)
    r_bracket       reduce using rule 67 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION .)


state 104

    (66) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .

    lt              reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    gt              reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    lte             reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    gte             reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    equal_equal     reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    notequal        reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    ampersand       reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    cap             reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    pipe            reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    ampersand_ampersand reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    pipe_pipe       reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    semicolon       reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    r_paren         reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    comma           reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    left_shift      reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)
    r_bracket       reduce using rule 66 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION .)


state 105

    (69) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .

    lt              reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    gt              reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    lte             reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    gte             reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    equal_equal     reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    notequal        reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    ampersand       reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    cap             reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    pipe            reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    ampersand_ampersand reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    pipe_pipe       reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    semicolon       reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    r_paren         reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    comma           reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    left_shift      reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)
    r_bracket       reduce using rule 69 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION .)


state 106

    (68) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .

    lt              reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    gt              reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    lte             reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    gte             reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    equal_equal     reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    notequal        reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    ampersand       reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    cap             reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    pipe            reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    ampersand_ampersand reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    pipe_pipe       reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    semicolon       reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    r_paren         reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    comma           reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    left_shift      reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)
    r_bracket       reduce using rule 68 (RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION .)


state 107

    (6) MAIN -> Int Main l_paren . r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace

    r_paren         shift and go to state 130


state 108

    (55) LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .
    (57) INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION . pipe EXCLUSIVE_OR_EXPRESSION

    ampersand_ampersand reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    pipe_pipe       reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    semicolon       reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    comma           reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    r_paren         reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    left_shift      reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    r_bracket       reduce using rule 55 (LOGICAL_AND_EXPRESSION -> LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION .)
    pipe            shift and go to state 92


state 109

    (39) ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION .

    semicolon       reduce using rule 39 (ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION .)
    comma           reduce using rule 39 (ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION .)
    r_paren         reduce using rule 39 (ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION .)
    left_shift      reduce using rule 39 (ASSIGNMENT_EXPRESSION -> UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION .)


state 110

    (99) DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .

    Int             reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    semicolon       reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    plus_plus       reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    minus_minus     reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    l_paren         reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    star            reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    ampersand       reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    plus            reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    minus           reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    exclamation     reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    tilde           reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Char            reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Short           reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Long            reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Signed          reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Unsigned        reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Float           reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    Double          reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    integer_constant reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    character_constant reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    floating_constant reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    string_literal  reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)
    identifier      reduce using rule 99 (DECLARATION -> DECL_SPECIFIERS DECLARATOR_LIST semicolon .)


state 111

    (131) DNAME -> tilde NAME .

    l_bracket       reduce using rule 131 (DNAME -> tilde NAME .)
    equal           reduce using rule 131 (DNAME -> tilde NAME .)
    l_paren         reduce using rule 131 (DNAME -> tilde NAME .)
    semicolon       reduce using rule 131 (DNAME -> tilde NAME .)
    r_paren         reduce using rule 131 (DNAME -> tilde NAME .)


state 112

    (130) DNAME -> NAME .

    r_paren         reduce using rule 130 (DNAME -> NAME .)
    l_bracket       reduce using rule 130 (DNAME -> NAME .)


state 113

    (125) DECLARATOR -> l_paren DECLARATOR . r_paren
    (123) DECLARATOR -> DECLARATOR . l_bracket CONSTANT_EXPRESSION r_bracket
    (124) DECLARATOR -> DECLARATOR . l_bracket r_bracket

    r_paren         shift and go to state 131
    l_bracket       shift and go to state 117


state 114

    (118) INIT_DECLARATOR -> DECLARATOR INITIALIZER .

    semicolon       reduce using rule 118 (INIT_DECLARATOR -> DECLARATOR INITIALIZER .)


state 115

    (132) INITIALIZER -> equal . ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 132
    CONDITIONAL_EXPRESSION         shift and go to state 46
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44

state 116

    (133) INITIALIZER -> l_paren . EXPRESSION_LIST r_paren
    (88) EXPRESSION_LIST -> . ASSIGNMENT_EXPRESSION
    (89) EXPRESSION_LIST -> . EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 134
    CONDITIONAL_EXPRESSION         shift and go to state 46
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    EXPRESSION_LIST                shift and go to state 133

state 117

    (123) DECLARATOR -> DECLARATOR l_bracket . CONSTANT_EXPRESSION r_bracket
    (124) DECLARATOR -> DECLARATOR l_bracket . r_bracket
    (115) CONSTANT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    r_bracket       shift and go to state 135
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    EQUALITY_EXPRESSION            shift and go to state 44
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    CONSTANT_EXPRESSION            shift and go to state 136
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    CONDITIONAL_EXPRESSION         shift and go to state 137
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    UNARY_OPERATOR                 shift and go to state 47

state 118

    (61) AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .
    (63) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION . equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION . notequal RELATIONAL_EXPRESSION

    ampersand       reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    cap             reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    pipe            reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    ampersand_ampersand reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    pipe_pipe       reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    semicolon       reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    comma           reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    r_paren         reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    left_shift      reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    r_bracket       reduce using rule 61 (AND_EXPRESSION -> AND_EXPRESSION ampersand EQUALITY_EXPRESSION .)
    equal_equal     shift and go to state 93
    notequal        shift and go to state 94


state 119

    (37) EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION .

    semicolon       reduce using rule 37 (EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION .)
    comma           reduce using rule 37 (EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION .)
    left_shift      reduce using rule 37 (EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION .)
    r_paren         reduce using rule 37 (EXPRESSION -> EXPRESSION comma ASSIGNMENT_EXPRESSION .)


state 120

    (93) PRIMARY_EXPRESSION -> NAME l_bracket integer_constant . r_bracket

    r_bracket       shift and go to state 138


state 121

    (75) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .

    star            reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    slash           reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    mod             reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    plus            reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    minus           reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    lt              reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    gt              reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    lte             reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    gte             reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    equal_equal     reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    notequal        reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    ampersand       reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    cap             reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    pipe            reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    comma           reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    left_shift      reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    semicolon       reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    r_paren         reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)
    r_bracket       reduce using rule 75 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION .)


state 122

    (77) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .

    star            reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    slash           reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    mod             reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    plus            reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    minus           reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    lt              reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    gt              reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    lte             reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    gte             reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    equal_equal     reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    notequal        reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    ampersand       reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    cap             reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    pipe            reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    comma           reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    left_shift      reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    semicolon       reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    r_paren         reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)
    r_bracket       reduce using rule 77 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION .)


state 123

    (76) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .

    star            reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    slash           reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    mod             reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    plus            reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    minus           reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    lt              reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    gt              reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    lte             reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    gte             reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    equal_equal     reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    notequal        reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    ampersand       reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    cap             reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    pipe            reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    ampersand_ampersand reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    pipe_pipe       reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    comma           reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    left_shift      reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    semicolon       reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    r_paren         reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)
    r_bracket       reduce using rule 76 (MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION .)


state 124

    (57) INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .
    (59) EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION . cap AND_EXPRESSION

    pipe            reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    ampersand_ampersand reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    pipe_pipe       reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    semicolon       reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    comma           reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    r_paren         reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    left_shift      reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    r_bracket       reduce using rule 57 (INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION .)
    cap             shift and go to state 98


state 125

    (63) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .
    (66) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gte SHIFT_EXPRESSION

    equal_equal     reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    notequal        reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    ampersand       reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    cap             reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    pipe            reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    ampersand_ampersand reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    pipe_pipe       reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    comma           reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    left_shift      reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    semicolon       reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    r_paren         reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    r_bracket       reduce using rule 63 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION .)
    lt              shift and go to state 56
    gt              shift and go to state 55
    lte             shift and go to state 58
    gte             shift and go to state 57


state 126

    (64) EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .
    (66) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION . gte SHIFT_EXPRESSION

    equal_equal     reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    notequal        reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    ampersand       reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    cap             reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    pipe            reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    ampersand_ampersand reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    pipe_pipe       reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    comma           reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    left_shift      reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    semicolon       reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    r_paren         reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    r_bracket       reduce using rule 64 (EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION .)
    lt              shift and go to state 56
    gt              shift and go to state 55
    lte             shift and go to state 58
    gte             shift and go to state 57


state 127

    (72) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .
    (75) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . mod UNARY_EXPRESSION

    plus            reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    minus           reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    lt              reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    gt              reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    lte             reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    gte             reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    equal_equal     reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    notequal        reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    ampersand       reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    cap             reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    pipe            reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    ampersand_ampersand reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    pipe_pipe       reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    semicolon       reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    r_bracket       reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    comma           reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    r_paren         reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    left_shift      reduce using rule 72 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION .)
    star            shift and go to state 88
    slash           shift and go to state 90
    mod             shift and go to state 89


state 128

    (73) ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .
    (75) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION . mod UNARY_EXPRESSION

    plus            reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    minus           reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    lt              reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    gt              reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    lte             reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    gte             reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    equal_equal     reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    notequal        reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    ampersand       reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    cap             reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    pipe            reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    ampersand_ampersand reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    pipe_pipe       reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    semicolon       reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    r_bracket       reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    comma           reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    r_paren         reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    left_shift      reduce using rule 73 (ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION .)
    star            shift and go to state 88
    slash           shift and go to state 90
    mod             shift and go to state 89


state 129

    (59) EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .
    (61) AND_EXPRESSION -> AND_EXPRESSION . ampersand EQUALITY_EXPRESSION

    cap             reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    pipe            reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    ampersand_ampersand reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    pipe_pipe       reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    r_bracket       reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    r_paren         reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    comma           reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    semicolon       reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    left_shift      reduce using rule 59 (EXCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION .)
    ampersand       shift and go to state 82


state 130

    (6) MAIN -> Int Main l_paren r_paren . l_brace STATEMENT_LIST Return integer_constant semicolon r_brace

    l_brace         shift and go to state 139


state 131

    (125) DECLARATOR -> l_paren DECLARATOR r_paren .

    l_bracket       reduce using rule 125 (DECLARATOR -> l_paren DECLARATOR r_paren .)
    equal           reduce using rule 125 (DECLARATOR -> l_paren DECLARATOR r_paren .)
    l_paren         reduce using rule 125 (DECLARATOR -> l_paren DECLARATOR r_paren .)
    semicolon       reduce using rule 125 (DECLARATOR -> l_paren DECLARATOR r_paren .)
    r_paren         reduce using rule 125 (DECLARATOR -> l_paren DECLARATOR r_paren .)


state 132

    (132) INITIALIZER -> equal ASSIGNMENT_EXPRESSION .

    semicolon       reduce using rule 132 (INITIALIZER -> equal ASSIGNMENT_EXPRESSION .)


state 133

    (133) INITIALIZER -> l_paren EXPRESSION_LIST . r_paren
    (89) EXPRESSION_LIST -> EXPRESSION_LIST . comma ASSIGNMENT_EXPRESSION

    r_paren         shift and go to state 141
    comma           shift and go to state 140


state 134

    (88) EXPRESSION_LIST -> ASSIGNMENT_EXPRESSION .

    r_paren         reduce using rule 88 (EXPRESSION_LIST -> ASSIGNMENT_EXPRESSION .)
    comma           reduce using rule 88 (EXPRESSION_LIST -> ASSIGNMENT_EXPRESSION .)


state 135

    (124) DECLARATOR -> DECLARATOR l_bracket r_bracket .

    l_bracket       reduce using rule 124 (DECLARATOR -> DECLARATOR l_bracket r_bracket .)
    equal           reduce using rule 124 (DECLARATOR -> DECLARATOR l_bracket r_bracket .)
    l_paren         reduce using rule 124 (DECLARATOR -> DECLARATOR l_bracket r_bracket .)
    semicolon       reduce using rule 124 (DECLARATOR -> DECLARATOR l_bracket r_bracket .)
    r_paren         reduce using rule 124 (DECLARATOR -> DECLARATOR l_bracket r_bracket .)


state 136

    (123) DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION . r_bracket

    r_bracket       shift and go to state 142


state 137

    (115) CONSTANT_EXPRESSION -> CONDITIONAL_EXPRESSION .

    r_bracket       reduce using rule 115 (CONSTANT_EXPRESSION -> CONDITIONAL_EXPRESSION .)


state 138

    (93) PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .

    star            reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    slash           reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    mod             reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    plus            reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    minus           reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    lt              reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    gt              reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    lte             reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    gte             reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    equal_equal     reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    notequal        reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    ampersand       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    cap             reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    pipe            reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    ampersand_ampersand reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    pipe_pipe       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    semicolon       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    comma           reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    r_paren         reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    left_shift      reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    r_bracket       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    equal           reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    star_equal      reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    slash_equal     reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    mod_equal       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    plus_equal      reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    minus_equal     reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    left_shift_equal reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    right_shift_equal reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    ampersand_equal reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    cap_equal       reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)
    pipe_equal      reduce using rule 93 (PRIMARY_EXPRESSION -> NAME l_bracket integer_constant r_bracket .)


state 139

    (6) MAIN -> Int Main l_paren r_paren l_brace . STATEMENT_LIST Return integer_constant semicolon r_brace
    (25) STATEMENT_LIST -> . STATEMENT
    (26) STATEMENT_LIST -> . STATEMENT_LIST STATEMENT
    (7) STATEMENT -> . EXPRESSION_STATEMENT
    (8) STATEMENT -> . SELECTION_STATEMENT
    (9) STATEMENT -> . JUMP_STATEMENT
    (10) STATEMENT -> . ITERATION_STATEMENT
    (11) STATEMENT -> . LOCAL_DECLARATION_STATEMENT
    (12) STATEMENT -> . PRINT_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (28) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (31) JUMP_STATEMENT -> . Break semicolon
    (32) JUMP_STATEMENT -> . Continue semicolon
    (33) JUMP_STATEMENT -> . Return EXPRESSION semicolon
    (34) JUMP_STATEMENT -> . Return semicolon
    (27) ITERATION_STATEMENT -> . While l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (18) LOCAL_DECLARATION_STATEMENT -> . LOCAL_DECLARATION
    (13) PRINT_STATEMENT -> . Cout CASCADE semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (100) LOCAL_DECLARATION -> . LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (101) LOCAL_DECL_SPECIFIERS -> . LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME
    (102) LOCAL_DECL_SPECIFIERS -> . SIMPLE_TYPE_NAME
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (94) NAME -> . identifier
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    semicolon       shift and go to state 13
    If              shift and go to state 144
    Break           shift and go to state 154
    Continue        shift and go to state 148
    Return          shift and go to state 153
    While           shift and go to state 155
    Cout            shift and go to state 160
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    identifier      shift and go to state 35
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32

    SELECTION_STATEMENT            shift and go to state 152
    ADDITIVE_EXPRESSION            shift and go to state 45
    STATEMENT                      shift and go to state 143
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 156
    EXPRESSION_STATEMENT           shift and go to state 157
    EQUALITY_EXPRESSION            shift and go to state 44
    PRINT_STATEMENT                shift and go to state 145
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    LOCAL_DECLARATION              shift and go to state 158
    SIMPLE_TYPE_NAME               shift and go to state 159
    AND_EXPRESSION                 shift and go to state 27
    JUMP_STATEMENT                 shift and go to state 146
    PRIMARY_EXPRESSION             shift and go to state 9
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ITERATION_STATEMENT            shift and go to state 147
    LOCAL_DECL_SPECIFIERS          shift and go to state 149
    UNARY_OPERATOR                 shift and go to state 47
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    LITERAL                        shift and go to state 16
    UNARY_EXPRESSION               shift and go to state 18
    STATEMENT_LIST                 shift and go to state 150
    LOCAL_DECLARATION_STATEMENT    shift and go to state 151

state 140

    (89) EXPRESSION_LIST -> EXPRESSION_LIST comma . ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 161
    CONDITIONAL_EXPRESSION         shift and go to state 46
    UNARY_OPERATOR                 shift and go to state 47
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44

state 141

    (133) INITIALIZER -> l_paren EXPRESSION_LIST r_paren .

    semicolon       reduce using rule 133 (INITIALIZER -> l_paren EXPRESSION_LIST r_paren .)


state 142

    (123) DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .

    l_bracket       reduce using rule 123 (DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    equal           reduce using rule 123 (DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    l_paren         reduce using rule 123 (DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    semicolon       reduce using rule 123 (DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    r_paren         reduce using rule 123 (DECLARATOR -> DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)


state 143

    (25) STATEMENT_LIST -> STATEMENT .

    Return          reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    semicolon       reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    If              reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Break           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Continue        reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    While           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Cout            reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    plus_plus       reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    minus_minus     reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Char            reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Short           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Int             reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Long            reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Signed          reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Unsigned        reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Float           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    Double          reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    l_paren         reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    star            reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    ampersand       reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    plus            reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    minus           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    exclamation     reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    tilde           reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    identifier      reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    integer_constant reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    character_constant reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    floating_constant reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    string_literal  reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)
    r_brace         reduce using rule 25 (STATEMENT_LIST -> STATEMENT .)


state 144

    (28) SELECTION_STATEMENT -> If . l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> If . l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT

    l_paren         shift and go to state 162


state 145

    (12) STATEMENT -> PRINT_STATEMENT .

    r_brace         reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    semicolon       reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    If              reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Break           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Continue        reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Return          reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    While           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Cout            reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    plus_plus       reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    minus_minus     reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Char            reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Short           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Int             reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Long            reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Signed          reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Unsigned        reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Float           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    Double          reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    l_paren         reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    star            reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    ampersand       reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    plus            reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    minus           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    exclamation     reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    tilde           reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    identifier      reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    integer_constant reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    character_constant reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    floating_constant reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)
    string_literal  reduce using rule 12 (STATEMENT -> PRINT_STATEMENT .)


state 146

    (9) STATEMENT -> JUMP_STATEMENT .

    r_brace         reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    semicolon       reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    If              reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Break           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Continue        reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Return          reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    While           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Cout            reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    plus_plus       reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    minus_minus     reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Char            reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Short           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Int             reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Long            reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Signed          reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Unsigned        reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Float           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    Double          reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    l_paren         reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    star            reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    ampersand       reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    plus            reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    minus           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    exclamation     reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    tilde           reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    identifier      reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    integer_constant reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    character_constant reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    floating_constant reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)
    string_literal  reduce using rule 9 (STATEMENT -> JUMP_STATEMENT .)


state 147

    (10) STATEMENT -> ITERATION_STATEMENT .

    r_brace         reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    semicolon       reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    If              reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Break           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Continue        reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Return          reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    While           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Cout            reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    plus_plus       reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    minus_minus     reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Char            reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Short           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Int             reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Long            reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Signed          reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Unsigned        reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Float           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    Double          reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    l_paren         reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    star            reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    ampersand       reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    plus            reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    minus           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    exclamation     reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    tilde           reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    identifier      reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    integer_constant reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    character_constant reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    floating_constant reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)
    string_literal  reduce using rule 10 (STATEMENT -> ITERATION_STATEMENT .)


state 148

    (32) JUMP_STATEMENT -> Continue . semicolon

    semicolon       shift and go to state 163


state 149

    (100) LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS . LOCAL_DECLARATOR_LIST semicolon
    (101) LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS . SIMPLE_TYPE_NAME
    (117) LOCAL_DECLARATOR_LIST -> . LOCAL_INIT_DECLARATOR
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (120) LOCAL_INIT_DECLARATOR -> . LOCAL_DECLARATOR INITIALIZER
    (121) LOCAL_INIT_DECLARATOR -> . LOCAL_DECLARATOR
    (94) NAME -> . identifier
    (126) LOCAL_DECLARATOR -> . NAME
    (127) LOCAL_DECLARATOR -> . LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
    (128) LOCAL_DECLARATOR -> . LOCAL_DECLARATOR l_bracket r_bracket
    (129) LOCAL_DECLARATOR -> . l_paren LOCAL_DECLARATOR r_paren

    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    identifier      shift and go to state 35
    l_paren         shift and go to state 164

    LOCAL_DECLARATOR_LIST          shift and go to state 168
    LOCAL_DECLARATOR               shift and go to state 169
    SIMPLE_TYPE_NAME               shift and go to state 167
    NAME                           shift and go to state 165
    LOCAL_INIT_DECLARATOR          shift and go to state 166

state 150

    (6) MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST . Return integer_constant semicolon r_brace
    (26) STATEMENT_LIST -> STATEMENT_LIST . STATEMENT
    (7) STATEMENT -> . EXPRESSION_STATEMENT
    (8) STATEMENT -> . SELECTION_STATEMENT
    (9) STATEMENT -> . JUMP_STATEMENT
    (10) STATEMENT -> . ITERATION_STATEMENT
    (11) STATEMENT -> . LOCAL_DECLARATION_STATEMENT
    (12) STATEMENT -> . PRINT_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (28) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (31) JUMP_STATEMENT -> . Break semicolon
    (32) JUMP_STATEMENT -> . Continue semicolon
    (33) JUMP_STATEMENT -> . Return EXPRESSION semicolon
    (34) JUMP_STATEMENT -> . Return semicolon
    (27) ITERATION_STATEMENT -> . While l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (18) LOCAL_DECLARATION_STATEMENT -> . LOCAL_DECLARATION
    (13) PRINT_STATEMENT -> . Cout CASCADE semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (100) LOCAL_DECLARATION -> . LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (101) LOCAL_DECL_SPECIFIERS -> . LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME
    (102) LOCAL_DECL_SPECIFIERS -> . SIMPLE_TYPE_NAME
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (94) NAME -> . identifier
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    Return          shift and go to state 171
    semicolon       shift and go to state 13
    If              shift and go to state 144
    Break           shift and go to state 154
    Continue        shift and go to state 148
    While           shift and go to state 155
    Cout            shift and go to state 160
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    identifier      shift and go to state 35
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32

    SELECTION_STATEMENT            shift and go to state 152
    ADDITIVE_EXPRESSION            shift and go to state 45
    STATEMENT                      shift and go to state 170
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 156
    EXPRESSION_STATEMENT           shift and go to state 157
    EQUALITY_EXPRESSION            shift and go to state 44
    PRINT_STATEMENT                shift and go to state 145
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    LOCAL_DECLARATION              shift and go to state 158
    SIMPLE_TYPE_NAME               shift and go to state 159
    AND_EXPRESSION                 shift and go to state 27
    JUMP_STATEMENT                 shift and go to state 146
    PRIMARY_EXPRESSION             shift and go to state 9
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ITERATION_STATEMENT            shift and go to state 147
    LOCAL_DECL_SPECIFIERS          shift and go to state 149
    UNARY_OPERATOR                 shift and go to state 47
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    LITERAL                        shift and go to state 16
    UNARY_EXPRESSION               shift and go to state 18
    LOCAL_DECLARATION_STATEMENT    shift and go to state 151

state 151

    (11) STATEMENT -> LOCAL_DECLARATION_STATEMENT .

    r_brace         reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    semicolon       reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    If              reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Break           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Continue        reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Return          reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    While           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Cout            reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    plus_plus       reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    minus_minus     reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Char            reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Short           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Int             reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Long            reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Signed          reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Unsigned        reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Float           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    Double          reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    l_paren         reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    star            reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    ampersand       reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    plus            reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    minus           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    exclamation     reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    tilde           reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    identifier      reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    integer_constant reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    character_constant reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    floating_constant reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)
    string_literal  reduce using rule 11 (STATEMENT -> LOCAL_DECLARATION_STATEMENT .)


state 152

    (8) STATEMENT -> SELECTION_STATEMENT .

    r_brace         reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    semicolon       reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    If              reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Break           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Continue        reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Return          reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    While           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Cout            reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    plus_plus       reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    minus_minus     reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Char            reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Short           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Int             reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Long            reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Signed          reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Unsigned        reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Float           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    Double          reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    l_paren         reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    star            reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    ampersand       reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    plus            reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    minus           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    exclamation     reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    tilde           reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    identifier      reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    integer_constant reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    character_constant reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    floating_constant reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)
    string_literal  reduce using rule 8 (STATEMENT -> SELECTION_STATEMENT .)


state 153

    (33) JUMP_STATEMENT -> Return . EXPRESSION semicolon
    (34) JUMP_STATEMENT -> Return . semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    semicolon       shift and go to state 172
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 173
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 154

    (31) JUMP_STATEMENT -> Break . semicolon

    semicolon       shift and go to state 174


state 155

    (27) ITERATION_STATEMENT -> While . l_paren EXPRESSION r_paren COMPOUND_STATEMENT

    l_paren         shift and go to state 175


state 156

    (106) SIMPLE_TYPE_NAME -> NAME .
    (92) PRIMARY_EXPRESSION -> NAME .
    (93) PRIMARY_EXPRESSION -> NAME . l_bracket integer_constant r_bracket

    Char            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Short           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Int             reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Long            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Signed          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Unsigned        reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Float           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Double          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    identifier      reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_paren         reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    equal           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    star_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    left_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    right_shift_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_equal reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap_equal       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_equal      reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    star            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    slash           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    mod             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    plus            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    minus           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gt              reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    lte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    gte             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    equal_equal     reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    notequal        reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    cap             reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe            reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    ampersand_ampersand reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    pipe_pipe       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    semicolon       reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    comma           reduce using rule 92 (PRIMARY_EXPRESSION -> NAME .)
    l_bracket       shift and go to state 87


state 157

    (7) STATEMENT -> EXPRESSION_STATEMENT .

    r_brace         reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    semicolon       reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    If              reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Break           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Continue        reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Return          reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    While           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Cout            reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    plus_plus       reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    minus_minus     reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Char            reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Short           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Int             reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Long            reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Signed          reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Unsigned        reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Float           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    Double          reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    l_paren         reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    star            reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    ampersand       reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    plus            reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    minus           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    exclamation     reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    tilde           reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    identifier      reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    integer_constant reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    character_constant reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    floating_constant reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)
    string_literal  reduce using rule 7 (STATEMENT -> EXPRESSION_STATEMENT .)


state 158

    (18) LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .

    r_brace         reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    semicolon       reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    If              reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Break           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Continue        reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Return          reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    While           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Cout            reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    plus_plus       reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    minus_minus     reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Char            reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Short           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Int             reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Long            reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Signed          reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Unsigned        reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Float           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    Double          reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    l_paren         reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    star            reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    ampersand       reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    plus            reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    minus           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    exclamation     reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    tilde           reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    identifier      reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    integer_constant reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    character_constant reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    floating_constant reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)
    string_literal  reduce using rule 18 (LOCAL_DECLARATION_STATEMENT -> LOCAL_DECLARATION .)


state 159

    (102) LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .

    Char            reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Short           reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Int             reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Long            reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Signed          reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Unsigned        reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Float           reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    Double          reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    identifier      reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)
    l_paren         reduce using rule 102 (LOCAL_DECL_SPECIFIERS -> SIMPLE_TYPE_NAME .)


state 160

    (13) PRINT_STATEMENT -> Cout . CASCADE semicolon
    (14) CASCADE -> . left_shift EXPRESSION
    (15) CASCADE -> . left_shift string_literal
    (16) CASCADE -> . left_shift EXPRESSION CASCADE
    (17) CASCADE -> . left_shift string_literal CASCADE

    left_shift      shift and go to state 176

    CASCADE                        shift and go to state 177

state 161

    (89) EXPRESSION_LIST -> EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION .

    r_paren         reduce using rule 89 (EXPRESSION_LIST -> EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION .)
    comma           reduce using rule 89 (EXPRESSION_LIST -> EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION .)


state 162

    (28) SELECTION_STATEMENT -> If l_paren . EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> If l_paren . EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 178
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 163

    (32) JUMP_STATEMENT -> Continue semicolon .

    Return          reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    semicolon       reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    If              reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Break           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Continue        reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    While           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Cout            reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    plus_plus       reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    minus_minus     reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Char            reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Short           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Int             reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Long            reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Signed          reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Unsigned        reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Float           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    Double          reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    l_paren         reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    star            reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    ampersand       reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    plus            reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    minus           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    exclamation     reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    tilde           reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    identifier      reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    integer_constant reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    character_constant reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    floating_constant reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    string_literal  reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)
    r_brace         reduce using rule 32 (JUMP_STATEMENT -> Continue semicolon .)


state 164

    (129) LOCAL_DECLARATOR -> l_paren . LOCAL_DECLARATOR r_paren
    (126) LOCAL_DECLARATOR -> . NAME
    (127) LOCAL_DECLARATOR -> . LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket
    (128) LOCAL_DECLARATOR -> . LOCAL_DECLARATOR l_bracket r_bracket
    (129) LOCAL_DECLARATOR -> . l_paren LOCAL_DECLARATOR r_paren
    (94) NAME -> . identifier

    l_paren         shift and go to state 164
    identifier      shift and go to state 35

    NAME                           shift and go to state 180
    LOCAL_DECLARATOR               shift and go to state 179

state 165

    (106) SIMPLE_TYPE_NAME -> NAME .
    (126) LOCAL_DECLARATOR -> NAME .

  ! reduce/reduce conflict for l_paren resolved using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Char            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Short           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Int             reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Long            reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Signed          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Unsigned        reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Float           reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    Double          reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    identifier      reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_paren         reduce using rule 106 (SIMPLE_TYPE_NAME -> NAME .)
    l_bracket       reduce using rule 126 (LOCAL_DECLARATOR -> NAME .)
    equal           reduce using rule 126 (LOCAL_DECLARATOR -> NAME .)
    semicolon       reduce using rule 126 (LOCAL_DECLARATOR -> NAME .)

  ! l_paren         [ reduce using rule 126 (LOCAL_DECLARATOR -> NAME .) ]


state 166

    (117) LOCAL_DECLARATOR_LIST -> LOCAL_INIT_DECLARATOR .

    semicolon       reduce using rule 117 (LOCAL_DECLARATOR_LIST -> LOCAL_INIT_DECLARATOR .)


state 167

    (101) LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .

    Char            reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Short           reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Int             reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Long            reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Signed          reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Unsigned        reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Float           reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    Double          reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    identifier      reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)
    l_paren         reduce using rule 101 (LOCAL_DECL_SPECIFIERS -> LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME .)


state 168

    (100) LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST . semicolon

    semicolon       shift and go to state 181


state 169

    (120) LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR . INITIALIZER
    (121) LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR .
    (127) LOCAL_DECLARATOR -> LOCAL_DECLARATOR . l_bracket CONSTANT_EXPRESSION r_bracket
    (128) LOCAL_DECLARATOR -> LOCAL_DECLARATOR . l_bracket r_bracket
    (132) INITIALIZER -> . equal ASSIGNMENT_EXPRESSION
    (133) INITIALIZER -> . l_paren EXPRESSION_LIST r_paren

    semicolon       reduce using rule 121 (LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR .)
    l_bracket       shift and go to state 183
    equal           shift and go to state 115
    l_paren         shift and go to state 116

    INITIALIZER                    shift and go to state 182

state 170

    (26) STATEMENT_LIST -> STATEMENT_LIST STATEMENT .

    Return          reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    semicolon       reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    If              reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Break           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Continue        reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    While           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Cout            reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    plus_plus       reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    minus_minus     reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Char            reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Short           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Int             reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Long            reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Signed          reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Unsigned        reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Float           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    Double          reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    l_paren         reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    star            reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    ampersand       reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    plus            reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    minus           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    exclamation     reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    tilde           reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    identifier      reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    integer_constant reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    character_constant reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    floating_constant reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    string_literal  reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)
    r_brace         reduce using rule 26 (STATEMENT_LIST -> STATEMENT_LIST STATEMENT .)


state 171

    (6) MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return . integer_constant semicolon r_brace
    (33) JUMP_STATEMENT -> Return . EXPRESSION semicolon
    (34) JUMP_STATEMENT -> Return . semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    integer_constant shift and go to state 184
    semicolon       shift and go to state 172
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 173
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 172

    (34) JUMP_STATEMENT -> Return semicolon .

    Return          reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    semicolon       reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    If              reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Break           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Continue        reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    While           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Cout            reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    plus_plus       reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    minus_minus     reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Char            reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Short           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Int             reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Long            reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Signed          reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Unsigned        reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Float           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    Double          reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    l_paren         reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    star            reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    ampersand       reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    plus            reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    minus           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    exclamation     reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    tilde           reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    identifier      reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    integer_constant reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    character_constant reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    floating_constant reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    string_literal  reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)
    r_brace         reduce using rule 34 (JUMP_STATEMENT -> Return semicolon .)


state 173

    (33) JUMP_STATEMENT -> Return EXPRESSION . semicolon
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION

    semicolon       shift and go to state 185
    comma           shift and go to state 85


state 174

    (31) JUMP_STATEMENT -> Break semicolon .

    Return          reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    semicolon       reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    If              reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Break           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Continue        reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    While           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Cout            reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    plus_plus       reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    minus_minus     reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Char            reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Short           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Int             reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Long            reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Signed          reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Unsigned        reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Float           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    Double          reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    l_paren         reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    star            reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    ampersand       reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    plus            reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    minus           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    exclamation     reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    tilde           reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    identifier      reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    integer_constant reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    character_constant reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    floating_constant reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    string_literal  reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)
    r_brace         reduce using rule 31 (JUMP_STATEMENT -> Break semicolon .)


state 175

    (27) ITERATION_STATEMENT -> While l_paren . EXPRESSION r_paren COMPOUND_STATEMENT
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    UNARY_EXPRESSION               shift and go to state 18
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 186
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 176

    (14) CASCADE -> left_shift . EXPRESSION
    (15) CASCADE -> left_shift . string_literal
    (16) CASCADE -> left_shift . EXPRESSION CASCADE
    (17) CASCADE -> left_shift . string_literal CASCADE
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    string_literal  shift and go to state 188
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    identifier      shift and go to state 35

    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 187
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 18
    PRIMARY_EXPRESSION             shift and go to state 9
    EQUALITY_EXPRESSION            shift and go to state 44
    UNARY_OPERATOR                 shift and go to state 47

state 177

    (13) PRINT_STATEMENT -> Cout CASCADE . semicolon

    semicolon       shift and go to state 189


state 178

    (28) SELECTION_STATEMENT -> If l_paren EXPRESSION . r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION . r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION

    r_paren         shift and go to state 190
    comma           shift and go to state 85


state 179

    (129) LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR . r_paren
    (127) LOCAL_DECLARATOR -> LOCAL_DECLARATOR . l_bracket CONSTANT_EXPRESSION r_bracket
    (128) LOCAL_DECLARATOR -> LOCAL_DECLARATOR . l_bracket r_bracket

    r_paren         shift and go to state 191
    l_bracket       shift and go to state 183


state 180

    (126) LOCAL_DECLARATOR -> NAME .

    r_paren         reduce using rule 126 (LOCAL_DECLARATOR -> NAME .)
    l_bracket       reduce using rule 126 (LOCAL_DECLARATOR -> NAME .)


state 181

    (100) LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .

    r_brace         reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    semicolon       reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    If              reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Break           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Continue        reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Return          reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    While           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Cout            reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    plus_plus       reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    minus_minus     reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Char            reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Short           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Int             reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Long            reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Signed          reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Unsigned        reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Float           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    Double          reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    l_paren         reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    star            reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    ampersand       reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    plus            reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    minus           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    exclamation     reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    tilde           reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    identifier      reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    integer_constant reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    character_constant reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    floating_constant reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)
    string_literal  reduce using rule 100 (LOCAL_DECLARATION -> LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon .)


state 182

    (120) LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR INITIALIZER .

    semicolon       reduce using rule 120 (LOCAL_INIT_DECLARATOR -> LOCAL_DECLARATOR INITIALIZER .)


state 183

    (127) LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket . CONSTANT_EXPRESSION r_bracket
    (128) LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket . r_bracket
    (115) CONSTANT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (94) NAME -> . identifier

    r_bracket       shift and go to state 192
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32
    identifier      shift and go to state 35

    EQUALITY_EXPRESSION            shift and go to state 44
    RELATIONAL_EXPRESSION          shift and go to state 8
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    AND_EXPRESSION                 shift and go to state 27
    ADDITIVE_EXPRESSION            shift and go to state 45
    SHIFT_EXPRESSION               shift and go to state 1
    CONSTANT_EXPRESSION            shift and go to state 193
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    CONDITIONAL_EXPRESSION         shift and go to state 137
    UNARY_OPERATOR                 shift and go to state 47
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    LITERAL                        shift and go to state 16
    NAME                           shift and go to state 54
    UNARY_EXPRESSION               shift and go to state 101
    PRIMARY_EXPRESSION             shift and go to state 9
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48

state 184

    (6) MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant . semicolon r_brace
    (95) LITERAL -> integer_constant .

  ! shift/reduce conflict for semicolon resolved as shift
    semicolon       shift and go to state 194
    equal           reduce using rule 95 (LITERAL -> integer_constant .)
    star_equal      reduce using rule 95 (LITERAL -> integer_constant .)
    slash_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    mod_equal       reduce using rule 95 (LITERAL -> integer_constant .)
    plus_equal      reduce using rule 95 (LITERAL -> integer_constant .)
    minus_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    left_shift_equal reduce using rule 95 (LITERAL -> integer_constant .)
    right_shift_equal reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand_equal reduce using rule 95 (LITERAL -> integer_constant .)
    cap_equal       reduce using rule 95 (LITERAL -> integer_constant .)
    pipe_equal      reduce using rule 95 (LITERAL -> integer_constant .)
    star            reduce using rule 95 (LITERAL -> integer_constant .)
    slash           reduce using rule 95 (LITERAL -> integer_constant .)
    mod             reduce using rule 95 (LITERAL -> integer_constant .)
    plus            reduce using rule 95 (LITERAL -> integer_constant .)
    minus           reduce using rule 95 (LITERAL -> integer_constant .)
    lt              reduce using rule 95 (LITERAL -> integer_constant .)
    gt              reduce using rule 95 (LITERAL -> integer_constant .)
    lte             reduce using rule 95 (LITERAL -> integer_constant .)
    gte             reduce using rule 95 (LITERAL -> integer_constant .)
    equal_equal     reduce using rule 95 (LITERAL -> integer_constant .)
    notequal        reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand       reduce using rule 95 (LITERAL -> integer_constant .)
    cap             reduce using rule 95 (LITERAL -> integer_constant .)
    pipe            reduce using rule 95 (LITERAL -> integer_constant .)
    ampersand_ampersand reduce using rule 95 (LITERAL -> integer_constant .)
    pipe_pipe       reduce using rule 95 (LITERAL -> integer_constant .)
    comma           reduce using rule 95 (LITERAL -> integer_constant .)

  ! semicolon       [ reduce using rule 95 (LITERAL -> integer_constant .) ]


state 185

    (33) JUMP_STATEMENT -> Return EXPRESSION semicolon .

    Return          reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    semicolon       reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    If              reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Break           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Continue        reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    While           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Cout            reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    plus_plus       reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    minus_minus     reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Char            reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Short           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Int             reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Long            reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Signed          reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Unsigned        reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Float           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    Double          reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    l_paren         reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    star            reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    ampersand       reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    plus            reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    minus           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    exclamation     reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    tilde           reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    identifier      reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    integer_constant reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    character_constant reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    floating_constant reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    string_literal  reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)
    r_brace         reduce using rule 33 (JUMP_STATEMENT -> Return EXPRESSION semicolon .)


state 186

    (27) ITERATION_STATEMENT -> While l_paren EXPRESSION . r_paren COMPOUND_STATEMENT
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION

    r_paren         shift and go to state 195
    comma           shift and go to state 85


state 187

    (14) CASCADE -> left_shift EXPRESSION .
    (16) CASCADE -> left_shift EXPRESSION . CASCADE
    (37) EXPRESSION -> EXPRESSION . comma ASSIGNMENT_EXPRESSION
    (14) CASCADE -> . left_shift EXPRESSION
    (15) CASCADE -> . left_shift string_literal
    (16) CASCADE -> . left_shift EXPRESSION CASCADE
    (17) CASCADE -> . left_shift string_literal CASCADE

    semicolon       reduce using rule 14 (CASCADE -> left_shift EXPRESSION .)
    comma           shift and go to state 85
    left_shift      shift and go to state 176

    CASCADE                        shift and go to state 196

state 188

    (15) CASCADE -> left_shift string_literal .
    (17) CASCADE -> left_shift string_literal . CASCADE
    (98) LITERAL -> string_literal .
    (14) CASCADE -> . left_shift EXPRESSION
    (15) CASCADE -> . left_shift string_literal
    (16) CASCADE -> . left_shift EXPRESSION CASCADE
    (17) CASCADE -> . left_shift string_literal CASCADE

  ! reduce/reduce conflict for semicolon resolved using rule 15 (CASCADE -> left_shift string_literal .)
  ! shift/reduce conflict for left_shift resolved as shift
    semicolon       reduce using rule 15 (CASCADE -> left_shift string_literal .)
    equal           reduce using rule 98 (LITERAL -> string_literal .)
    star_equal      reduce using rule 98 (LITERAL -> string_literal .)
    slash_equal     reduce using rule 98 (LITERAL -> string_literal .)
    mod_equal       reduce using rule 98 (LITERAL -> string_literal .)
    plus_equal      reduce using rule 98 (LITERAL -> string_literal .)
    minus_equal     reduce using rule 98 (LITERAL -> string_literal .)
    left_shift_equal reduce using rule 98 (LITERAL -> string_literal .)
    right_shift_equal reduce using rule 98 (LITERAL -> string_literal .)
    ampersand_equal reduce using rule 98 (LITERAL -> string_literal .)
    cap_equal       reduce using rule 98 (LITERAL -> string_literal .)
    pipe_equal      reduce using rule 98 (LITERAL -> string_literal .)
    star            reduce using rule 98 (LITERAL -> string_literal .)
    slash           reduce using rule 98 (LITERAL -> string_literal .)
    mod             reduce using rule 98 (LITERAL -> string_literal .)
    plus            reduce using rule 98 (LITERAL -> string_literal .)
    minus           reduce using rule 98 (LITERAL -> string_literal .)
    lt              reduce using rule 98 (LITERAL -> string_literal .)
    gt              reduce using rule 98 (LITERAL -> string_literal .)
    lte             reduce using rule 98 (LITERAL -> string_literal .)
    gte             reduce using rule 98 (LITERAL -> string_literal .)
    equal_equal     reduce using rule 98 (LITERAL -> string_literal .)
    notequal        reduce using rule 98 (LITERAL -> string_literal .)
    ampersand       reduce using rule 98 (LITERAL -> string_literal .)
    cap             reduce using rule 98 (LITERAL -> string_literal .)
    pipe            reduce using rule 98 (LITERAL -> string_literal .)
    ampersand_ampersand reduce using rule 98 (LITERAL -> string_literal .)
    pipe_pipe       reduce using rule 98 (LITERAL -> string_literal .)
    comma           reduce using rule 98 (LITERAL -> string_literal .)
    left_shift      shift and go to state 176

  ! left_shift      [ reduce using rule 98 (LITERAL -> string_literal .) ]
  ! semicolon       [ reduce using rule 98 (LITERAL -> string_literal .) ]

    CASCADE                        shift and go to state 197

state 189

    (13) PRINT_STATEMENT -> Cout CASCADE semicolon .

    r_brace         reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    semicolon       reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    If              reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Break           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Continue        reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Return          reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    While           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Cout            reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    plus_plus       reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    minus_minus     reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Char            reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Short           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Int             reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Long            reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Signed          reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Unsigned        reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Float           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    Double          reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    l_paren         reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    star            reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    ampersand       reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    plus            reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    minus           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    exclamation     reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    tilde           reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    identifier      reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    integer_constant reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    character_constant reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    floating_constant reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)
    string_literal  reduce using rule 13 (PRINT_STATEMENT -> Cout CASCADE semicolon .)


state 190

    (28) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren . COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren . COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (21) COMPOUND_STATEMENT -> . l_brace STATEMENT_LIST r_brace
    (22) COMPOUND_STATEMENT -> . l_brace r_brace

    l_brace         shift and go to state 198

    COMPOUND_STATEMENT             shift and go to state 199

state 191

    (129) LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .

    r_paren         reduce using rule 129 (LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .)
    l_bracket       reduce using rule 129 (LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .)
    equal           reduce using rule 129 (LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .)
    l_paren         reduce using rule 129 (LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .)
    semicolon       reduce using rule 129 (LOCAL_DECLARATOR -> l_paren LOCAL_DECLARATOR r_paren .)


state 192

    (128) LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .

    r_paren         reduce using rule 128 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .)
    l_bracket       reduce using rule 128 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .)
    equal           reduce using rule 128 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .)
    l_paren         reduce using rule 128 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .)
    semicolon       reduce using rule 128 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket r_bracket .)


state 193

    (127) LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION . r_bracket

    r_bracket       shift and go to state 200


state 194

    (6) MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon . r_brace

    r_brace         shift and go to state 201


state 195

    (27) ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren . COMPOUND_STATEMENT
    (21) COMPOUND_STATEMENT -> . l_brace STATEMENT_LIST r_brace
    (22) COMPOUND_STATEMENT -> . l_brace r_brace

    l_brace         shift and go to state 198

    COMPOUND_STATEMENT             shift and go to state 202

state 196

    (16) CASCADE -> left_shift EXPRESSION CASCADE .

    semicolon       reduce using rule 16 (CASCADE -> left_shift EXPRESSION CASCADE .)


state 197

    (17) CASCADE -> left_shift string_literal CASCADE .

    semicolon       reduce using rule 17 (CASCADE -> left_shift string_literal CASCADE .)


state 198

    (21) COMPOUND_STATEMENT -> l_brace . STATEMENT_LIST r_brace
    (22) COMPOUND_STATEMENT -> l_brace . r_brace
    (25) STATEMENT_LIST -> . STATEMENT
    (26) STATEMENT_LIST -> . STATEMENT_LIST STATEMENT
    (7) STATEMENT -> . EXPRESSION_STATEMENT
    (8) STATEMENT -> . SELECTION_STATEMENT
    (9) STATEMENT -> . JUMP_STATEMENT
    (10) STATEMENT -> . ITERATION_STATEMENT
    (11) STATEMENT -> . LOCAL_DECLARATION_STATEMENT
    (12) STATEMENT -> . PRINT_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (28) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (31) JUMP_STATEMENT -> . Break semicolon
    (32) JUMP_STATEMENT -> . Continue semicolon
    (33) JUMP_STATEMENT -> . Return EXPRESSION semicolon
    (34) JUMP_STATEMENT -> . Return semicolon
    (27) ITERATION_STATEMENT -> . While l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (18) LOCAL_DECLARATION_STATEMENT -> . LOCAL_DECLARATION
    (13) PRINT_STATEMENT -> . Cout CASCADE semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (100) LOCAL_DECLARATION -> . LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (101) LOCAL_DECL_SPECIFIERS -> . LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME
    (102) LOCAL_DECL_SPECIFIERS -> . SIMPLE_TYPE_NAME
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (94) NAME -> . identifier
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    r_brace         shift and go to state 203
    semicolon       shift and go to state 13
    If              shift and go to state 144
    Break           shift and go to state 154
    Continue        shift and go to state 148
    Return          shift and go to state 153
    While           shift and go to state 155
    Cout            shift and go to state 160
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    identifier      shift and go to state 35
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32

    SELECTION_STATEMENT            shift and go to state 152
    ADDITIVE_EXPRESSION            shift and go to state 45
    STATEMENT                      shift and go to state 143
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 156
    EXPRESSION_STATEMENT           shift and go to state 157
    EQUALITY_EXPRESSION            shift and go to state 44
    PRINT_STATEMENT                shift and go to state 145
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    LOCAL_DECLARATION              shift and go to state 158
    SIMPLE_TYPE_NAME               shift and go to state 159
    AND_EXPRESSION                 shift and go to state 27
    JUMP_STATEMENT                 shift and go to state 146
    PRIMARY_EXPRESSION             shift and go to state 9
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ITERATION_STATEMENT            shift and go to state 147
    LOCAL_DECL_SPECIFIERS          shift and go to state 149
    UNARY_OPERATOR                 shift and go to state 47
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    LITERAL                        shift and go to state 16
    UNARY_EXPRESSION               shift and go to state 18
    STATEMENT_LIST                 shift and go to state 204
    LOCAL_DECLARATION_STATEMENT    shift and go to state 151

state 199

    (28) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .
    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT . TEMP Else COMPOUND_STATEMENT
    (30) TEMP -> . EPSILON
    (3) EPSILON -> .

    r_brace         reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    semicolon       reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    If              reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Break           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Continue        reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Return          reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    While           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Cout            reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    plus_plus       reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    minus_minus     reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Char            reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Short           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Int             reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Long            reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Signed          reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Unsigned        reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Float           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Double          reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    l_paren         reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    star            reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    ampersand       reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    plus            reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    minus           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    exclamation     reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    tilde           reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    identifier      reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    integer_constant reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    character_constant reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    floating_constant reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    string_literal  reduce using rule 28 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Else            reduce using rule 3 (EPSILON -> .)

    EPSILON                        shift and go to state 205
    TEMP                           shift and go to state 206

state 200

    (127) LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .

    r_paren         reduce using rule 127 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    l_bracket       reduce using rule 127 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    equal           reduce using rule 127 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    l_paren         reduce using rule 127 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)
    semicolon       reduce using rule 127 (LOCAL_DECLARATOR -> LOCAL_DECLARATOR l_bracket CONSTANT_EXPRESSION r_bracket .)


state 201

    (6) MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace .

    $end            reduce using rule 6 (MAIN -> Int Main l_paren r_paren l_brace STATEMENT_LIST Return integer_constant semicolon r_brace .)


state 202

    (27) ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .

    r_brace         reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    semicolon       reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    If              reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Break           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Continue        reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Return          reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    While           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Cout            reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    plus_plus       reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    minus_minus     reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Char            reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Short           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Int             reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Long            reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Signed          reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Unsigned        reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Float           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    Double          reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    l_paren         reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    star            reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    ampersand       reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    plus            reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    minus           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    exclamation     reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    tilde           reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    identifier      reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    integer_constant reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    character_constant reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    floating_constant reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)
    string_literal  reduce using rule 27 (ITERATION_STATEMENT -> While l_paren EXPRESSION r_paren COMPOUND_STATEMENT .)


state 203

    (22) COMPOUND_STATEMENT -> l_brace r_brace .

    Return          reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    semicolon       reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    If              reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Break           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Continue        reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    While           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Cout            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    plus_plus       reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    minus_minus     reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Char            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Short           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Int             reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Long            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Signed          reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Unsigned        reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Float           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Double          reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    l_paren         reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    star            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    ampersand       reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    plus            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    minus           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    exclamation     reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    tilde           reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    identifier      reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    integer_constant reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    character_constant reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    floating_constant reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    string_literal  reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    r_brace         reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)
    Else            reduce using rule 22 (COMPOUND_STATEMENT -> l_brace r_brace .)


state 204

    (21) COMPOUND_STATEMENT -> l_brace STATEMENT_LIST . r_brace
    (26) STATEMENT_LIST -> STATEMENT_LIST . STATEMENT
    (7) STATEMENT -> . EXPRESSION_STATEMENT
    (8) STATEMENT -> . SELECTION_STATEMENT
    (9) STATEMENT -> . JUMP_STATEMENT
    (10) STATEMENT -> . ITERATION_STATEMENT
    (11) STATEMENT -> . LOCAL_DECLARATION_STATEMENT
    (12) STATEMENT -> . PRINT_STATEMENT
    (19) EXPRESSION_STATEMENT -> . EXPRESSION semicolon
    (20) EXPRESSION_STATEMENT -> . semicolon
    (28) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (29) SELECTION_STATEMENT -> . If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT
    (31) JUMP_STATEMENT -> . Break semicolon
    (32) JUMP_STATEMENT -> . Continue semicolon
    (33) JUMP_STATEMENT -> . Return EXPRESSION semicolon
    (34) JUMP_STATEMENT -> . Return semicolon
    (27) ITERATION_STATEMENT -> . While l_paren EXPRESSION r_paren COMPOUND_STATEMENT
    (18) LOCAL_DECLARATION_STATEMENT -> . LOCAL_DECLARATION
    (13) PRINT_STATEMENT -> . Cout CASCADE semicolon
    (36) EXPRESSION -> . ASSIGNMENT_EXPRESSION
    (37) EXPRESSION -> . EXPRESSION comma ASSIGNMENT_EXPRESSION
    (100) LOCAL_DECLARATION -> . LOCAL_DECL_SPECIFIERS LOCAL_DECLARATOR_LIST semicolon
    (38) ASSIGNMENT_EXPRESSION -> . CONDITIONAL_EXPRESSION
    (39) ASSIGNMENT_EXPRESSION -> . UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
    (101) LOCAL_DECL_SPECIFIERS -> . LOCAL_DECL_SPECIFIERS SIMPLE_TYPE_NAME
    (102) LOCAL_DECL_SPECIFIERS -> . SIMPLE_TYPE_NAME
    (51) CONDITIONAL_EXPRESSION -> . LOGICAL_OR_EXPRESSION
    (78) UNARY_EXPRESSION -> . PRIMARY_EXPRESSION
    (79) UNARY_EXPRESSION -> . UNARY_OPERATOR UNARY_EXPRESSION
    (80) UNARY_EXPRESSION -> . plus_plus UNARY_EXPRESSION
    (81) UNARY_EXPRESSION -> . minus_minus UNARY_EXPRESSION
    (106) SIMPLE_TYPE_NAME -> . NAME
    (107) SIMPLE_TYPE_NAME -> . Char
    (108) SIMPLE_TYPE_NAME -> . Short
    (109) SIMPLE_TYPE_NAME -> . Int
    (110) SIMPLE_TYPE_NAME -> . Long
    (111) SIMPLE_TYPE_NAME -> . Signed
    (112) SIMPLE_TYPE_NAME -> . Unsigned
    (113) SIMPLE_TYPE_NAME -> . Float
    (114) SIMPLE_TYPE_NAME -> . Double
    (52) LOGICAL_OR_EXPRESSION -> . LOGICAL_AND_EXPRESSION
    (53) LOGICAL_OR_EXPRESSION -> . LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION
    (90) PRIMARY_EXPRESSION -> . LITERAL
    (91) PRIMARY_EXPRESSION -> . l_paren EXPRESSION r_paren
    (92) PRIMARY_EXPRESSION -> . NAME
    (93) PRIMARY_EXPRESSION -> . NAME l_bracket integer_constant r_bracket
    (82) UNARY_OPERATOR -> . star
    (83) UNARY_OPERATOR -> . ampersand
    (84) UNARY_OPERATOR -> . plus
    (85) UNARY_OPERATOR -> . minus
    (86) UNARY_OPERATOR -> . exclamation
    (87) UNARY_OPERATOR -> . tilde
    (94) NAME -> . identifier
    (54) LOGICAL_AND_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION
    (55) LOGICAL_AND_EXPRESSION -> . LOGICAL_AND_EXPRESSION ampersand_ampersand INCLUSIVE_OR_EXPRESSION
    (95) LITERAL -> . integer_constant
    (96) LITERAL -> . character_constant
    (97) LITERAL -> . floating_constant
    (98) LITERAL -> . string_literal
    (56) INCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION
    (57) INCLUSIVE_OR_EXPRESSION -> . INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION
    (58) EXCLUSIVE_OR_EXPRESSION -> . AND_EXPRESSION
    (59) EXCLUSIVE_OR_EXPRESSION -> . EXCLUSIVE_OR_EXPRESSION cap AND_EXPRESSION
    (60) AND_EXPRESSION -> . EQUALITY_EXPRESSION
    (61) AND_EXPRESSION -> . AND_EXPRESSION ampersand EQUALITY_EXPRESSION
    (62) EQUALITY_EXPRESSION -> . RELATIONAL_EXPRESSION
    (63) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION
    (64) EQUALITY_EXPRESSION -> . EQUALITY_EXPRESSION notequal RELATIONAL_EXPRESSION
    (65) RELATIONAL_EXPRESSION -> . SHIFT_EXPRESSION
    (66) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lt SHIFT_EXPRESSION
    (67) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gt SHIFT_EXPRESSION
    (68) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION lte SHIFT_EXPRESSION
    (69) RELATIONAL_EXPRESSION -> . RELATIONAL_EXPRESSION gte SHIFT_EXPRESSION
    (70) SHIFT_EXPRESSION -> . ADDITIVE_EXPRESSION
    (71) ADDITIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION
    (72) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION
    (73) ADDITIVE_EXPRESSION -> . ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION
    (74) MULTIPLICATIVE_EXPRESSION -> . UNARY_EXPRESSION
    (75) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION star UNARY_EXPRESSION
    (76) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION slash UNARY_EXPRESSION
    (77) MULTIPLICATIVE_EXPRESSION -> . MULTIPLICATIVE_EXPRESSION mod UNARY_EXPRESSION

    r_brace         shift and go to state 207
    semicolon       shift and go to state 13
    If              shift and go to state 144
    Break           shift and go to state 154
    Continue        shift and go to state 148
    Return          shift and go to state 153
    While           shift and go to state 155
    Cout            shift and go to state 160
    plus_plus       shift and go to state 39
    minus_minus     shift and go to state 50
    Char            shift and go to state 24
    Short           shift and go to state 28
    Int             shift and go to state 79
    Long            shift and go to state 25
    Signed          shift and go to state 14
    Unsigned        shift and go to state 42
    Float           shift and go to state 4
    Double          shift and go to state 26
    l_paren         shift and go to state 6
    star            shift and go to state 3
    ampersand       shift and go to state 51
    plus            shift and go to state 10
    minus           shift and go to state 2
    exclamation     shift and go to state 12
    tilde           shift and go to state 36
    identifier      shift and go to state 35
    integer_constant shift and go to state 29
    character_constant shift and go to state 41
    floating_constant shift and go to state 40
    string_literal  shift and go to state 32

    SELECTION_STATEMENT            shift and go to state 152
    ADDITIVE_EXPRESSION            shift and go to state 45
    STATEMENT                      shift and go to state 170
    CONDITIONAL_EXPRESSION         shift and go to state 46
    EXPRESSION                     shift and go to state 31
    LOGICAL_OR_EXPRESSION          shift and go to state 5
    NAME                           shift and go to state 156
    EXPRESSION_STATEMENT           shift and go to state 157
    EQUALITY_EXPRESSION            shift and go to state 44
    PRINT_STATEMENT                shift and go to state 145
    LOGICAL_AND_EXPRESSION         shift and go to state 15
    RELATIONAL_EXPRESSION          shift and go to state 8
    LOCAL_DECLARATION              shift and go to state 158
    SIMPLE_TYPE_NAME               shift and go to state 159
    AND_EXPRESSION                 shift and go to state 27
    JUMP_STATEMENT                 shift and go to state 146
    PRIMARY_EXPRESSION             shift and go to state 9
    SHIFT_EXPRESSION               shift and go to state 1
    INCLUSIVE_OR_EXPRESSION        shift and go to state 43
    ITERATION_STATEMENT            shift and go to state 147
    LOCAL_DECL_SPECIFIERS          shift and go to state 149
    UNARY_OPERATOR                 shift and go to state 47
    MULTIPLICATIVE_EXPRESSION      shift and go to state 37
    EXCLUSIVE_OR_EXPRESSION        shift and go to state 48
    ASSIGNMENT_EXPRESSION          shift and go to state 49
    LITERAL                        shift and go to state 16
    UNARY_EXPRESSION               shift and go to state 18
    LOCAL_DECLARATION_STATEMENT    shift and go to state 151

state 205

    (30) TEMP -> EPSILON .

    Else            reduce using rule 30 (TEMP -> EPSILON .)


state 206

    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP . Else COMPOUND_STATEMENT

    Else            shift and go to state 208


state 207

    (21) COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .

    Return          reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    semicolon       reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    If              reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Break           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Continue        reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    While           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Cout            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    plus_plus       reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    minus_minus     reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Char            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Short           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Int             reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Long            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Signed          reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Unsigned        reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Float           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Double          reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    l_paren         reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    star            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    ampersand       reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    plus            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    minus           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    exclamation     reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    tilde           reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    identifier      reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    integer_constant reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    character_constant reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    floating_constant reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    string_literal  reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    r_brace         reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)
    Else            reduce using rule 21 (COMPOUND_STATEMENT -> l_brace STATEMENT_LIST r_brace .)


state 208

    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else . COMPOUND_STATEMENT
    (21) COMPOUND_STATEMENT -> . l_brace STATEMENT_LIST r_brace
    (22) COMPOUND_STATEMENT -> . l_brace r_brace

    l_brace         shift and go to state 198

    COMPOUND_STATEMENT             shift and go to state 209

state 209

    (29) SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .

    r_brace         reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    semicolon       reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    If              reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Break           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Continue        reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Return          reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    While           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Cout            reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    plus_plus       reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    minus_minus     reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Char            reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Short           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Int             reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Long            reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Signed          reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Unsigned        reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Float           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    Double          reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    l_paren         reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    star            reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    ampersand       reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    plus            reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    minus           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    exclamation     reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    tilde           reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    identifier      reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    integer_constant reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    character_constant reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    floating_constant reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)
    string_literal  reduce using rule 29 (SELECTION_STATEMENT -> If l_paren EXPRESSION r_paren COMPOUND_STATEMENT TEMP Else COMPOUND_STATEMENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for semicolon in state 184 resolved as shift
WARNING: shift/reduce conflict for left_shift in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 77 resolved using rule (SIMPLE_TYPE_NAME -> NAME)
WARNING: rejected rule (DNAME -> NAME) in state 77
WARNING: reduce/reduce conflict in state 165 resolved using rule (SIMPLE_TYPE_NAME -> NAME)
WARNING: rejected rule (LOCAL_DECLARATOR -> NAME) in state 165
WARNING: reduce/reduce conflict in state 188 resolved using rule (CASCADE -> left_shift string_literal)
WARNING: rejected rule (LITERAL -> string_literal) in state 188
